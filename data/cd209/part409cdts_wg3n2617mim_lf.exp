(*
$Id: mim_lf.exp,v 1.20 2013/02/20 01:23:04 thomasrthurman Exp $
*)

(* ===================================================================================== *)
(* Long form schema generated by The EXPRESS Data Manager  compiler version 9.8.3B 20121030*)
(* Tue Feb 19 15:18:16 2013                                                                *)
(* The schema is converted from ISO10303 P11-2003 to ISO10303 P11-1994                     *)
(* ===================================================================================== *)

SCHEMA Ap209_multidisciplinary_analysis_and_design_mim_LF;



(*
USE FROM Ap242_managed_model_based_3d_engineering_mim;


USE FROM Analysis_assignment_mim;
USE FROM Analysis_characterized_mim;
USE FROM Analysis_identification_mim;
USE FROM Analysis_product_relationships_mim;


USE FROM Analysis_mim;
USE FROM Analysis_representation_mim;
USE FROM Cfd_model_mim;
USE FROM Finite_elements_mim;
USE FROM Mesh_connectivity_mim;
USE FROM Mesh_topology_mim;
USE FROM Product_analysis_mim;


USE FROM Analysis_shape_mim;
USE FROM Finite_element_shape_mim;


USE FROM Cfd_specified_general_property_mim;
USE FROM Fea_definition_relationships_mim;
USE FROM Fea_material_aspects_mim;


USE FROM Cfd_equations_mim;
USE FROM Cfd_results_mim;
USE FROM Finite_element_analysis_mim;
USE FROM Mesh_function_mim;


USE FROM mathematical_functions_schema;           
USE FROM ISO13584_generic_expressions_schema;     
USE FROM ISO13584_expressions_schema;             

USE FROM Part_view_definition_mim;
USE FROM Collection_identification_and_version_mim;    
*)

CONSTANT
schema_date_stamp : STRING := 'Tue Feb 19 15:18:16 2013';
(* Implicit interfaced from: mathematical_functions_schema *)
  the_integer_tuples   : extended_tuple_space := make_extended_tuple_space(
    the_zero_tuple_space, the_integers);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_empty_maths_tuple      : maths_tuple := [];

(* Implicit interfaced from: mathematical_functions_schema *)
  the_generics        : elementary_space := make_elementary_space(es_generics);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_integers        : elementary_space := make_elementary_space(es_integers);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_reals           : elementary_space := make_elementary_space(es_reals);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_booleans        : elementary_space := make_elementary_space(es_booleans);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_strings         : elementary_space := make_elementary_space(es_strings);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_complex_numbers : elementary_space := make_elementary_space(es_complex_numbers);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_numbers         : elementary_space := make_elementary_space(es_numbers);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_zero_tuple_space : listed_product_space := make_listed_product_space([]);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_tuples           : extended_tuple_space := make_extended_tuple_space(
    the_zero_tuple_space, the_generics);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_empty_space : finite_space := make_finite_space([]);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_logicals        : elementary_space := make_elementary_space(es_logicals);

(* Implicit interfaced from: mathematical_functions_schema *)  schema_prefix : STRING := 'AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.';

(* Implicit interfaced from: mathematical_functions_schema *)
  the_real_tuples      : extended_tuple_space := make_extended_tuple_space(
    the_zero_tuple_space, the_reals);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_nonnegative_reals         : real_interval_from_min :=
    make_real_interval_from_min(0.0, closed);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_neg1_one_interval         : finite_real_interval := make_finite_real_interval(
    -1.0, closed, 1.0, closed);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_complex_tuples   : extended_tuple_space := make_extended_tuple_space(
    the_zero_tuple_space, the_complex_numbers);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_binarys         : elementary_space := make_elementary_space(es_binarys);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_maths_spaces    : elementary_space := make_elementary_space(es_maths_spaces);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_zero_pi_interval          : finite_real_interval := make_finite_real_interval(
    0.0, closed, pi, closed);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_neghalfpi_halfpi_interval : finite_real_interval := make_finite_real_interval(
    -0.5*pi, closed, 0.5*pi, closed);

(* Implicit interfaced from: mathematical_functions_schema *)
  the_negpi_pi_interval         : finite_real_interval := make_finite_real_interval(
    -pi, open, pi, closed);

(* Implicit interfaced from: Picture_representation_mim *)
    pre_defined_picture_representation_types : SET [0:?] OF STRING := [ 'JPEG', 'PNG', 'TIFF', 'BMP', 'GIF']; 

(* Implicit interfaced from: geometry_schema *)
  dummy_gri : geometric_representation_item := representation_item('')|| geometric_representation_item(); 

(* Implicit interfaced from: topology_schema *)
    dummy_tri : topological_representation_item := representation_item('')||
                   topological_representation_item();        

END_CONSTANT;

(* Pruned unused type: pdq_person_and_organization_item  *)


(* Pruned unused type: ap209e2_analysed_item  *)


(* Pruned unused type: ap209e2_groupable_item  *)


(* Pruned unused type: ap209e2_analysis_identification_item  *)


(* Pruned unused type: property_variable_rep_select_242  *)


(* Pruned unused type: item_identified_representation_usage_definition_242  *)


(* Pruned unused type: draughting_model_item_definition_242  *)


(* Pruned unused type: ap242_change_management_object  *)


(* Pruned unused type: ap242_change_relationship_select  *)


(* Pruned unused type: action_request_item_242  *)


(* Pruned unused type: aliasable_item_242  *)


(* Pruned unused type: approval_item_242  *)

(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  TYPE approved_item = SELECT
    (certification, 
    change, 
    change_request, 
    configuration_effectivity, 
    configuration_item, 
    contract, 
    product, 
    security_classification, 
    start_request, 
    start_work);
  END_TYPE; 

(* Pruned unused type: attribute_language_item_242  *)


(* Pruned unused type: certification_item_242  *)

(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  TYPE certified_item = SELECT
    (supplied_part_relationship);
  END_TYPE; 
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  TYPE change_request_item = SELECT
    (product_definition_formation);
  END_TYPE; 
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  TYPE cc_classified_item = SELECT 
    (assembly_component_usage, 
    product_definition_formation);
  END_TYPE; 

(* Pruned unused type: contract_item_242  *)

(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  TYPE contracted_item = SELECT
    (product_definition_formation);
  END_TYPE; 

(* Pruned unused type: date_and_time_item_242  *)


(* Pruned unused type: date_item_242  *)

(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  TYPE date_time_item = SELECT
    (approval_person_organization, 
    certification, 
    change, 
    change_request, 
    contract, 
    product_definition, 
    security_classification, 
    start_request, 
    start_work);
  END_TYPE; 

(* Pruned unused type: document_reference_item_242  *)


(* Pruned unused type: effectivity_item_242  *)


(* Pruned unused type: event_occurrence_item_242  *)


(* Pruned unused type: external_identification_item_242  *)


(* Pruned unused type: groupable_item_242  *)


(* Pruned unused type: identification_item_242  *)


(* Pruned unused type: multi_language_attribute_item_242  *)


(* Pruned unused type: organization_item_242  *)


(* Pruned unused type: organizational_project_item_242  *)


(* Pruned unused type: person_and_organization_item_242  *)

(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  TYPE cc_person_organization_item = SELECT
    (change, 
    change_request, 
    configuration_item, 
    contract, 
    product, 
    product_definition, 
    product_definition_formation, 
    security_classification, 
    start_request, 
    start_work);
  END_TYPE; 

(* Pruned unused type: presented_item_select_242  *)


(* Pruned unused type: security_classification_item_242  *)

(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  TYPE cc_specified_item = SELECT
    (product_definition, 
    shape_aspect);
  END_TYPE; 
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  TYPE start_request_item = SELECT
    (product_definition_formation);
  END_TYPE; 

(* Pruned unused type: time_interval_item_242  *)


(* Pruned unused type: action_items_242  *)


(* Pruned unused type: classification_item_242  *)


(* Pruned unused type: configured_effectivity_item_242  *)

(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  TYPE work_item = SELECT
    (product_definition_formation);
  END_TYPE; 
(* USED FROM (Analysis_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE analysed_item = SELECT (
   fea_model,
   product_definition,
   temporal_spatial_domain);
END_TYPE;


(* Pruned unused type: analysis_identification_item  *)


(* Pruned unused type: analysis_approval_item  *)


(* Pruned unused type: analysis_classification_item  *)


(* Pruned unused type: analysis_contract_item  *)


(* Pruned unused type: analysis_date_and_time_item  *)


(* Pruned unused type: analysis_date_item  *)


(* Pruned unused type: analysis_organization_item  *)


(* Pruned unused type: analysis_person_and_organization_item  *)


(* Pruned unused type: analysis_security_classification_item  *)

(* USED FROM (Approval_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE approval_item = SELECT (
   action,
   action_directive,
   action_property,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   applied_usage_right,
   assembly_component_usage_substitute,
   certification,
   class,
   class_system,
   configuration_design,
   configuration_effectivity,
   configuration_item,
   configured_effectivity_assignment,
   contract,
   control,
   date,
   directed_action,
   document,
   document_file,
   draughting_model,
   drawing_revision,
   effectivity,
   executed_action,
   fea_model,
   frozen_assignment,
   general_property,
   general_property_relationship,
   group,
   group_relationship,
   information_usage_right,
   material_designation,
   mechanical_design_geometric_presentation_representation,
   organizational_project,
   presentation_area,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   representation,
   requirement_assignment,
   resource_property,
   result,
   security_classification,
   shape_aspect_relationship,
   shape_representation,
   temporal_spatial_domain,
   versioned_action_request);
END_TYPE;


(* Pruned unused type: date_and_time_item_approval  *)


(* Pruned unused type: date_item_approval  *)

(* USED FROM (Classification_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE classification_item = SELECT (
   action,
   action_directive,
   action_method,
   action_property,
   action_relationship,
   action_request_solution,
   action_request_status,
   address,
   alternate_product_relationship,
   applied_action_assignment,
   applied_action_request_assignment,
   applied_approval_assignment,
   applied_certification_assignment,
   applied_contract_assignment,
   applied_date_and_time_assignment,
   applied_date_assignment,
   applied_document_reference,
   applied_document_usage_constraint_assignment,
   applied_effectivity_assignment,
   applied_event_occurrence_assignment,
   applied_external_identification_assignment,
   applied_identification_assignment,
   applied_organization_assignment,
   applied_organizational_project_assignment,
   applied_person_and_organization_assignment,
   applied_security_classification_assignment,
   approval,
   approval_person_organization,
   approval_relationship,
   approval_status,
   assembly_component_usage_substitute,
   calendar_date,
   certification,
   characterized_class,
   characterized_object,
   class,
   classified_item,
   configuration_item,
   context_dependent_unit,
   contract,
   conversion_based_unit,
   date_and_time,
   date_and_time_assignment,
   date_assignment,
   derived_unit,
   descriptive_representation_item,
   directed_action,
   document_file,
   document_relationship,
   document_type,
   effectivity,
   event_occurrence,
   executed_action,
   feature_definition,
   general_feature,
   general_property,
   general_property_relationship,
   group,
   identification_assignment,
   information_right,
   information_usage_right,
   language,
   material_designation,
   measure_representation_item,
   measure_with_unit,
   multi_language_attribute_assignment,
   named_unit,
   organization,
   organization_relationship,
   organizational_address,
   organizational_project,
   organizational_project_relationship,
   person,
   person_and_organization_address,
   plus_minus_tolerance,
   process_operation,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_category,
   product_definition,
   product_definition_context,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   property_definition,
   property_definition_representation,
   representation,
   representation_context,
   representation_item,
   resource_property,
   security_classification,
   security_classification_level,
   shape_aspect,
   state_type,
   state_type_assignment,
   state_type_relationship,
   uncertainty_measure_with_unit,
   usage_association,
   versioned_action_request);
END_TYPE;

(* USED FROM (Contract_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE contract_item = SELECT (
   action_directive,
   alternate_product_relationship,
   directed_action,
   drawing_revision,
   executed_action,
   information_usage_right,
   organization,
   person_and_organization,
   product,
   product_definition_formation);
END_TYPE;

(* USED FROM (Date_time_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE date_item = SELECT (
   action,
   action_directive,
   action_method,
   action_property,
   action_relationship,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   applied_organization_assignment,
   applied_person_and_organization_assignment,
   applied_security_classification_assignment,
   approval_person_organization,
   approval_status,
   assembly_component_usage_substitute,
   certification,
   class,
   class_system,
   configuration_design,
   configuration_item,
   configured_effectivity_assignment,
   contract,
   data_quality_definition,
   directed_action,
   document,
   document_file,
   draughting_model,
   drawing_revision,
   effectivity,
   event_occurrence,
   executed_action,
   general_property,
   information_usage_right,
   material_designation,
   mechanical_design_geometric_presentation_representation,
   organization_relationship,
   organizational_project,
   person_and_organization,
   presentation_area,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   requirement_for_action_resource,
   resource_property,
   security_classification,
   security_classification_level,
   shape_representation,
   versioned_action_request);
END_TYPE;

(* USED FROM (Date_time_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE date_and_time_item = SELECT (
   action,
   action_directive,
   action_method,
   action_property,
   action_relationship,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   applied_organization_assignment,
   applied_person_and_organization_assignment,
   applied_security_classification_assignment,
   approval_person_organization,
   approval_status,
   assembly_component_usage_substitute,
   certification,
   class,
   class_system,
   configuration_design,
   configuration_item,
   configured_effectivity_assignment,
   contract,
   data_quality_definition,
   directed_action,
   document,
   document_file,
   draughting_model,
   drawing_revision,
   effectivity,
   event_occurrence,
   executed_action,
   general_property,
   information_usage_right,
   material_designation,
   mechanical_design_geometric_presentation_representation,
   organization_relationship,
   organizational_project,
   person_and_organization,
   presentation_area,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   requirement_for_action_resource,
   resource_property,
   rule_action,
   security_classification,
   security_classification_level,
   shape_representation,
   versioned_action_request);
END_TYPE;

(* USED FROM (Person_organization_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE organization_item = SELECT (
   action,
   action_directive,
   action_method,
   action_property,
   action_relationship,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   applied_identification_assignment,
   applied_organization_assignment,
   applied_person_and_organization_assignment,
   applied_security_classification_assignment,
   approval,
   approval_status,
   assembly_component_usage_substitute,
   certification,
   class,
   class_system,
   configuration_design,
   configuration_effectivity,
   configuration_item,
   configured_effectivity_assignment,
   contract,
   data_quality_definition,
   document_file,
   document_type,
   draughting_model,
   drawing_revision,
   effectivity,
   event_occurrence,
   executed_action,
   general_property,
   information_usage_right,
   material_designation,
   mechanical_design_geometric_presentation_representation,
   organization,
   organization_relationship,
   organizational_project,
   person_and_organization,
   presentation_area,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   requirement_for_action_resource,
   resource_property,
   rule_action,
   security_classification,
   security_classification_level,
   shape_representation,
   versioned_action_request);
END_TYPE;

(* USED FROM (Person_organization_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE person_and_organization_item = SELECT (
   action,
   action_directive,
   action_method,
   action_property,
   action_relationship,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   applied_identification_assignment,
   applied_organization_assignment,
   applied_person_and_organization_assignment,
   applied_security_classification_assignment,
   approval,
   approval_status,
   assembly_component_usage_substitute,
   certification,
   class,
   class_system,
   configuration_design,
   configuration_effectivity,
   configuration_item,
   configured_effectivity_assignment,
   contract,
   data_quality_definition,
   document_file,
   document_type,
   draughting_model,
   drawing_revision,
   event_occurrence,
   executed_action,
   general_property,
   information_usage_right,
   material_designation,
   mechanical_design_geometric_presentation_representation,
   organization,
   organization_relationship,
   organizational_project,
   person_and_organization,
   presentation_area,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   requirement_for_action_resource,
   resource_property,
   rule_action,
   security_classification,
   security_classification_level,
   shape_representation,
   versioned_action_request);
END_TYPE;

(* USED FROM (Security_classification_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE security_classification_item = SELECT (
   action,
   action_directive,
   action_property,
   applied_action_assignment,
   assembly_component_usage,
   assembly_component_usage_substitute,
   class_system,
   configuration_design,
   configuration_effectivity,
   configured_effectivity_assignment,
   document,
   document_file,
   draughting_model,
   drawing_revision,
   executed_action,
   general_property,
   make_from_usage_option,
   material_designation,
   mechanical_design_geometric_presentation_representation,
   organizational_project,
   presentation_area,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_category,
   product_definition,
   product_definition_formation,
   product_definition_relationship,
   product_definition_usage,
   property_definition,
   resource_property,
   shape_representation,
   versioned_action_request);
END_TYPE;

(* USED FROM (Identification_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE identification_item = SELECT (
   action,
   action_directive,
   action_method,
   action_property,
   applied_identification_assignment,
   approval_status,
   characterized_class,
   class,
   class_system,
   configuration_item,
   contract,
   dimensional_size,
   document_file,
   document_type,
   draughting_model,
   effectivity,
   general_property,
   group,
   group_relationship,
   information_right,
   information_usage_right,
   material_designation,
   measure_representation_item,
   mechanical_design_geometric_presentation_representation,
   organization,
   organizational_project,
   person_and_organization,
   presentation_area,
   product,
   product_category,
   product_class,
   product_concept,
   product_concept_feature,
   product_concept_feature_category,
   product_definition,
   product_definition_formation,
   product_definition_relationship,
   product_identification,
   property_definition,
   property_definition_relationship,
   representation,
   rule_set,
   security_classification,
   security_classification_level,
   shape_aspect_relationship,
   shape_representation,
   state_type,
   state_type_relationship,
   usage_association,
   versioned_action_request);
END_TYPE;

(* USED FROM (Shape_property_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE geometric_model_item = SELECT (
   connected_face_set,
   edge_loop,
   geometric_representation_item);
END_TYPE;

(* USED FROM (Shape_property_assignment_mim); *)
TYPE geometric_item_specific_usage_select = SELECT
   (shape_aspect,
    shape_aspect_relationship);
END_TYPE; 
(* USED FROM (Shape_property_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE shape_model = SELECT (
   constructive_geometry_representation,
   shape_representation);
END_TYPE;

(* USED FROM (mathematical_functions_schema); *)
TYPE nonnegative_integer = INTEGER;
WHERE 
nonnegativity: SELF >= 0;
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE positive_integer = nonnegative_integer;
WHERE positivity: SELF > 0;
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE zero_or_one = nonnegative_integer;
WHERE in_range: (SELF = 0) OR (SELF = 1);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE one_or_two = positive_integer;
WHERE in_range: (SELF = 1) OR (SELF = 2);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE maths_number = NUMBER;
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE maths_real = REAL;
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE maths_integer = INTEGER;
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE maths_logical = LOGICAL;
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE maths_boolean = BOOLEAN;
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE maths_string = STRING;
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE maths_binary = BINARY;
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE maths_simple_atom = SELECT
  (maths_number,
   maths_real,
   maths_integer,
   maths_logical,
   maths_boolean,
   maths_string,
   maths_binary);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE maths_atom = SELECT
  (maths_simple_atom,
   maths_enum_atom);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE atom_based_tuple = LIST OF atom_based_value;
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE atom_based_value = SELECT
  (maths_atom,
   atom_based_tuple);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE maths_tuple = LIST [0:?] OF maths_value;
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE maths_value = SELECT
  (atom_based_value,
   maths_tuple,
   generic_expression);
WHERE
  constancy: NOT ('GENERIC_EXPRESSION' IN stripped_typeof(SELF)) OR
             expression_is_constant(SELF);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE maths_expression = SELECT
  (atom_based_value,
   maths_tuple,
   generic_expression);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE maths_function_select = SELECT
  (maths_function,
   elementary_function_enumerators);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE input_selector = positive_integer;
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE elementary_space_enumerators = ENUMERATION OF
  (es_numbers,
   es_complex_numbers,
   es_reals,
   es_integers,
   es_logicals,
   es_booleans,
   es_strings,
   es_binarys,
   es_maths_spaces,
   es_maths_functions,
   es_generics);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE ordering_type = ENUMERATION OF
  (by_rows,
   by_columns);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE lower_upper = ENUMERATION OF
  (lower,
   upper);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE symmetry_type = ENUMERATION OF
  (identity,
   skew,
   hermitian,
   skew_hermitian);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE elementary_function_enumerators = ENUMERATION OF
  (ef_and, ef_or, ef_not, ef_xor,
   ef_negate_i, ef_add_i, ef_subtract_i, ef_multiply_i, ef_divide_i, ef_mod_i,
   ef_exponentiate_i, ef_eq_i, ef_ne_i, ef_gt_i, ef_lt_i, ef_ge_i, ef_le_i,
   ef_abs_i, ef_max_i, ef_min_i, ef_if_i,
   ef_negate_r, ef_reciprocal_r, ef_add_r, ef_subtract_r, ef_multiply_r,
   ef_divide_r, ef_mod_r, ef_exponentiate_r, ef_exponentiate_ri,
   ef_eq_r, ef_ne_r, ef_gt_r, ef_lt_r, ef_ge_r, ef_le_r, ef_abs_r,
   ef_max_r, ef_min_r, ef_acos_r, ef_asin_r, ef_atan2_r, ef_cos_r, ef_exp_r,
   ef_ln_r, ef_log2_r, ef_log10_r, ef_sin_r, ef_sqrt_r, ef_tan_r, ef_if_r,
   ef_form_c, ef_rpart_c, ef_ipart_c,
   ef_negate_c, ef_reciprocal_c, ef_add_c, ef_subtract_c, ef_multiply_c,
   ef_divide_c, ef_exponentiate_c, ef_exponentiate_ci, ef_eq_c, ef_ne_c,
   ef_conjugate_c, ef_abs_c, ef_arg_c, ef_cos_c, ef_exp_c, ef_ln_c, ef_sin_c,
   ef_sqrt_c, ef_tan_c, ef_if_c,
   ef_subscript_s, ef_eq_s, ef_ne_s, ef_gt_s, ef_lt_s, ef_ge_s, ef_le_s,
   ef_subsequence_s, ef_concat_s, ef_size_s, ef_format, ef_value, ef_like, ef_if_s,
   ef_subscript_b, ef_eq_b, ef_ne_b, ef_gt_b, ef_lt_b, ef_ge_b, ef_le_b,
   ef_subsequence_b, ef_concat_b, ef_size_b, ef_if_b,
   ef_subscript_t, ef_eq_t, ef_ne_t, ef_concat_t, ef_size_t,
   ef_entuple, ef_detuple, ef_insert, ef_remove, ef_if_t,
   ef_sum_it, ef_product_it,
   ef_add_it, ef_subtract_it, ef_scalar_mult_it, ef_dot_prod_it,
   ef_sum_rt, ef_product_rt,
   ef_add_rt, ef_subtract_rt, ef_scalar_mult_rt, ef_dot_prod_rt, ef_norm_rt,
   ef_sum_ct, ef_product_ct,
   ef_add_ct, ef_subtract_ct, ef_scalar_mult_ct, ef_dot_prod_ct, ef_norm_ct,
   ef_if, ef_ensemble, ef_member_of);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE open_closed = ENUMERATION OF
  (open,
   closed);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE space_constraint_type = ENUMERATION OF
  (sc_equal,
   sc_subspace,
   sc_member);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE repackage_options = ENUMERATION OF
  (ro_nochange,
   ro_wrap_as_tuple,
   ro_unwrap_tuple);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE extension_options = ENUMERATION OF
  (eo_none,
   eo_cont,
   eo_cont_right,
   eo_cont_left);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE maths_enum_atom = SELECT
  (elementary_space_enumerators,
   ordering_type,
   lower_upper,
   symmetry_type,
   elementary_function_enumerators,
   open_closed,
   space_constraint_type,
   repackage_options,
   extension_options);
END_TYPE;

(* Pruned unused type: classification_identification_item  *)


(* Pruned unused type: classification_item_extended  *)

(* USED FROM (mathematical_functions_schema); *)
TYPE product_space = SELECT
  (uniform_product_space,
   listed_product_space);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE tuple_space = SELECT
  (product_space,
   extended_tuple_space);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE maths_space_or_function = SELECT
  (maths_space,
   maths_function);
END_TYPE;
(* USED FROM (mathematical_functions_schema); *)
TYPE real_interval = SELECT
  (real_interval_from_min,
   real_interval_to_max,
   finite_real_interval,
   elementary_space);
WHERE
  WR1: NOT ('ELEMENTARY_SPACE' IN stripped_typeof(SELF)) OR
    (SELF\elementary_space.space_id = es_reals);
END_TYPE;

(* Pruned unused type: collection_assignment_groupable_item  *)


(* Pruned unused type: collection_membership_groupable_item  *)

(* USED FROM (Externally_conditioned_data_quality_inspection_result_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE inspected_ecdq_element_select = inspected_element_select;
END_TYPE;


(* Pruned unused type: csg2d_bounded_primitive_2d  *)

(* USED FROM (Constructive_solid_geometry_2d_mim); *)
  TYPE boolean_operand_2d = SELECT (
    bounded_primitive_2d,
    boolean_result_2d);
  END_TYPE; 
(* USED FROM (Constructive_solid_geometry_2d_mim); *)
  TYPE compound_inner_area_boundary = SELECT (
    set_inner_area_boundary);
  END_TYPE;
(* USED FROM (Constructive_solid_geometry_2d_mim); *)
  TYPE csg_2d_area_select = SELECT (
    axis2_placement_2d, 
    csg_primitive_solid_2d);
  END_TYPE;
(* USED FROM (Constructive_solid_geometry_2d_mim); *)
  TYPE csg_2d_shape_select = SELECT (
    mapped_item, 
    axis2_placement_2d, 
    csg_solid_2d);
  END_TYPE;
(* USED FROM (Constructive_solid_geometry_2d_mim); *)
  TYPE csg_select_2d = SELECT (
    bounded_primitive_2d, 
    boolean_result_2d);
  END_TYPE;
(* USED FROM (Constructive_solid_geometry_2d_mim); *)
  TYPE set_inner_area_boundary = SET [1:?] OF bounded_primitive_2d;
  END_TYPE;

(* Pruned unused type: dt_document_reference_item  *)


(* Pruned unused type: design_pdm_action_item  *)


(* Pruned unused type: design_pdm_action_method_items  *)


(* Pruned unused type: design_pdm_action_request_item  *)


(* Pruned unused type: design_pdm_approval_item  *)


(* Pruned unused type: design_pdm_attribute_classification_item  *)


(* Pruned unused type: design_pdm_attribute_language_item  *)


(* Pruned unused type: design_pdm_certification_item  *)


(* Pruned unused type: design_pdm_classification_item  *)


(* Pruned unused type: design_pdm_configured_effectivity_item  *)


(* Pruned unused type: design_pdm_contract_item  *)


(* Pruned unused type: design_pdm_date_and_time_item  *)


(* Pruned unused type: design_pdm_date_item  *)


(* Pruned unused type: design_pdm_document_reference_item  *)


(* Pruned unused type: design_pdm_effectivity_item  *)


(* Pruned unused type: design_pdm_event_occurrence_item  *)


(* Pruned unused type: design_pdm_groupable_item  *)


(* Pruned unused type: design_pdm_identification_item  *)


(* Pruned unused type: design_pdm_ir_usage_item  *)


(* Pruned unused type: design_pdm_multi_language_attribute_item  *)


(* Pruned unused type: design_pdm_name_item  *)


(* Pruned unused type: design_pdm_organization_item  *)


(* Pruned unused type: design_pdm_project_item  *)


(* Pruned unused type: design_pdm_person_and_organization_item  *)


(* Pruned unused type: design_pdm_requirement_assigned_item  *)


(* Pruned unused type: design_pdm_requirement_source_item  *)


(* Pruned unused type: design_pdm_security_classification_item  *)


(* Pruned unused type: promissory_usage_in_product_model_assigned_item  *)


(* Pruned unused type: design_pdm_time_interval_item  *)


(* Pruned unused type: datc_draughting_model_item_definition  *)


(* Pruned unused type: dimensioning_standard_document_reference_item  *)


(* Pruned unused type: dimension_identification_item  *)


(* Pruned unused type: dimension_tolerance_document_reference_item  *)


(* Pruned unused type: eri_external_identification  *)

(* USED FROM (Mechanical_design_presentation_representation_with_draughting_mim); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE mechanical_design_and_draughting_relationship_select = SELECT (
   draughting_model,
   mechanical_design_geometric_presentation_representation,
   mechanical_design_presentation_representation_with_draughting,
   mechanical_design_shaded_presentation_representation,
   shape_representation);
END_TYPE;

(* USED FROM (Picture_representation_mim); *)
  TYPE picture_representation_item_select = SELECT (
    styled_item,
    planar_box,
    axis2_placement_2d); 
  END_TYPE; 

(* Pruned unused type: pr_external_identification_item  *)


(* Pruned unused type: pc_action_items  *)

(* USED FROM (Ply_orientation_specification_mim); *)
  TYPE angle_direction_reference_select = SELECT (
    direction,
    curve,
    point_path);
  END_TYPE;
(* USED FROM (Ply_orientation_specification_mim); *)
  TYPE angle_direction_reference_with_a2p3d_select = SELECT (
    angle_direction_reference_select,
    axis2_placement_3d);
  END_TYPE;
(* USED FROM (Ply_orientation_specification_mim); *)
  TYPE orientation_basis_select = SELECT (
    axis2_placement_3d,
    min_and_major_ply_orientation_basis);
  END_TYPE;
(* USED FROM (Ply_orientation_specification_mim); *)
  TYPE point_and_vector_member = SELECT (point, direction);
  END_TYPE;
(* USED FROM (Ply_orientation_specification_mim); *)
  TYPE point_and_vector_members = LIST [2:3] OF point_and_vector_member;
  END_TYPE;
(* USED FROM (Ply_orientation_specification_mim); *)
  TYPE point_path_members = LIST [1:?] OF point_and_vector;
  END_TYPE;

(* Pruned unused type: mb3dgdtr_geometric_model_item  *)


(* Pruned unused type: cm_approval_item  *)

(* USED FROM (Change_management_mim); *)
TYPE previous_element_assignment_select = SELECT (modify_element, delete_element);
END_TYPE;
(* USED FROM (Change_management_mim); *)
TYPE current_element_assignment_select = SELECT (modify_element, add_element);
END_TYPE;
(* USED FROM (Change_management_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE change_relationship_select = SELECT (
   action_relationship,
   product_definition_formation_relationship,
   product_definition_relationship,
   shape_aspect_relationship);
END_TYPE;

(* USED FROM (Change_management_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE change_management_object = SELECT (
   action,
   action_items,
   action_relationship,
   class,
   event_occurrence,
   project_item);
END_TYPE;

(* USED FROM (Change_management_mim); *)
TYPE location_in_aggregate_item = LIST [1:?] OF integer_representation_item;
END_TYPE;
(* USED FROM (Point_direction_model_mim); *)
TYPE point_placement_shape_representation_item = SELECT (
  compound_representation_item,
  mapped_item,
  axis2_placement_3d);
END_TYPE;  
(* USED FROM (Numerical_interface_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE property_variable_rep_select = SELECT (
   dimensional_size,
   representation);
END_TYPE;

(* USED FROM (Numerical_interface_mim); *)
TYPE expression_extension_select = SELECT (
    expression_extension_string,
    expression_extension_numeric);
END_TYPE;
(* USED FROM (product_property_representation_schema); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE item_identified_representation_usage_definition = SELECT (
   applied_action_assignment,
   applied_action_method_assignment,
   applied_action_request_assignment,
   applied_approval_assignment,
   applied_certification_assignment,
   applied_classification_assignment,
   applied_contract_assignment,
   applied_date_and_time_assignment,
   applied_date_assignment,
   applied_document_reference,
   applied_document_usage_constraint_assignment,
   applied_effectivity_assignment,
   applied_event_occurrence_assignment,
   applied_external_identification_assignment,
   applied_group_assignment,
   applied_identification_assignment,
   applied_ineffectivity_assignment,
   applied_name_assignment,
   applied_organization_assignment,
   applied_organizational_project_assignment,
   applied_person_and_organization_assignment,
   applied_security_classification_assignment,
   applied_time_interval_assignment,
   applied_usage_right,
   dimensional_size,
   geometric_tolerance,
   product_definition_relationship,
   property_definition,
   represented_definition);
END_TYPE;

(* USED FROM (basic_attribute_schema); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE role_select = SELECT (
   action_assignment,
   action_request_assignment,
   approval_assignment,
   approval_date_time,
   certification_assignment,
   contract_assignment,
   document_reference,
   effectivity_assignment,
   group_assignment,
   name_assignment,
   security_classification_assignment);
END_TYPE;

(* USED FROM (basic_attribute_schema); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE id_attribute_select = SELECT (
   action,
   address,
   application_context,
   dimensional_size,
   geometric_tolerance,
   group,
   organizational_project,
   product_category,
   property_definition,
   representation,
   shape_aspect,
   shape_aspect_relationship);
END_TYPE;

(* USED FROM (basic_attribute_schema); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE name_attribute_select = SELECT (
   action_request_solution,
   address,
   configuration_design,
   context_dependent_shape_representation,
   derived_unit,
   effectivity,
   person_and_organization,
   product_definition,
   product_definition_substitute,
   property_definition_representation);
END_TYPE;


(* Pruned unused type: representation_identification_item  *)

(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE angular_value = 
     context_dependent_measure;
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE scalar = 
     context_dependent_measure;
END_TYPE;

(* Pruned unused type: tensor1  *)

(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE tensor1_2d = 
     ARRAY [1:2] OF context_dependent_measure;
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE tensor1_3d = 
  ARRAY [1:3] OF context_dependent_measure;
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE symmetric_tensor2_2d = SELECT
  (anisotropic_symmetric_tensor2_2d);
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE anisotropic_symmetric_tensor2_2d = 
  ARRAY [1:3] OF context_dependent_measure;
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE symmetric_tensor2_3d = SELECT
  (isotropic_symmetric_tensor2_3d,
   orthotropic_symmetric_tensor2_3d,
   anisotropic_symmetric_tensor2_3d);
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE isotropic_symmetric_tensor2_3d = 
     context_dependent_measure;
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE orthotropic_symmetric_tensor2_3d = 
     ARRAY [1:3] OF context_dependent_measure;
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE anisotropic_symmetric_tensor2_3d = 
     ARRAY [1:6] OF context_dependent_measure;
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE symmetric_tensor4_2d = SELECT
  (anisotropic_symmetric_tensor4_2d);
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE anisotropic_symmetric_tensor4_2d = 
     ARRAY [1:6] OF context_dependent_measure;
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE tensor_type = SELECT 
  (scalar,
   angular_value,
   tensor1_2d,
   tensor1_3d,
   anisotropic_symmetric_tensor2_2d,
   isotropic_symmetric_tensor2_3d,
   orthotropic_symmetric_tensor2_3d,
   anisotropic_symmetric_tensor2_3d,
   anisotropic_symmetric_tensor4_2d,
   anisotropic_symmetric_tensor4_3d,
   fea_isotropic_symmetric_tensor4_3d,
   fea_iso_orthotropic_symmetric_tensor4_3d,
   fea_transverse_isotropic_symmetric_tensor4_3d,
   fea_column_normalised_orthotropic_symmetric_tensor4_3d,
   fea_column_normalised_monoclinic_symmetric_tensor4_3d);
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE symmetric_tensor4_3d = SELECT
 (anisotropic_symmetric_tensor4_3d,
  fea_isotropic_symmetric_tensor4_3d,
  fea_iso_orthotropic_symmetric_tensor4_3d,
  fea_transverse_isotropic_symmetric_tensor4_3d,
  fea_column_normalised_orthotropic_symmetric_tensor4_3d,
  fea_column_normalised_monoclinic_symmetric_tensor4_3d);
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE anisotropic_symmetric_tensor4_3d = 
     ARRAY [1:21] OF context_dependent_measure;
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE fea_isotropic_symmetric_tensor4_3d = 
     ARRAY [1:2] OF context_dependent_measure;
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE fea_iso_orthotropic_symmetric_tensor4_3d = 
     ARRAY [1:3] OF context_dependent_measure;
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE fea_transverse_isotropic_symmetric_tensor4_3d = 
     ARRAY [1:5] OF context_dependent_measure;
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE fea_column_normalised_orthotropic_symmetric_tensor4_3d = 
     ARRAY [1:9] OF context_dependent_measure;
END_TYPE;
(* USED FROM (fea_scalar_vector_tensor_schema); *)
TYPE fea_column_normalised_monoclinic_symmetric_tensor4_3d = 
     ARRAY [1:13] OF context_dependent_measure;
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE axi_or_plane = ENUMERATION OF
  (axisymmetric,
   planar);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE coordinate_system_type = ENUMERATION OF
     (cartesian,
      cylindrical,
      spherical);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE element_order = ENUMERATION OF
     (linear,
      quadratic,
      cubic);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE plane_2d_element_purpose = SELECT
     (enumerated_plane_2d_element_purpose,
      application_defined_element_purpose);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE enumerated_plane_2d_element_purpose = ENUMERATION OF
     (plane_stress,
      plane_strain);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE application_defined_element_purpose = STRING;
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE volume_element_purpose = SELECT
     (enumerated_volume_element_purpose,
      application_defined_element_purpose);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE enumerated_volume_element_purpose = ENUMERATION OF
     (stress_displacement);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE surface_element_purpose = SELECT
     (enumerated_surface_element_purpose,
      application_defined_element_purpose);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE enumerated_surface_element_purpose = ENUMERATION OF
     (membrane_direct,
      membrane_shear,
      bending_direct,
      bending_torsion,
      normal_to_plane_shear);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE curve_element_purpose = SELECT
     (enumerated_curve_element_purpose,
      application_defined_element_purpose);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE enumerated_curve_element_purpose = ENUMERATION OF
     (axial,
      y_y_bending,
      z_z_bending,
      torsion,
      x_y_shear,
      x_z_shear,
      warping);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE volume_3d_element_shape = ENUMERATION OF
     (hexahedron,
      wedge,
      tetrahedron,
      pyramid);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE element_2d_shape = ENUMERATION OF
     (quadrilateral,
      triangle);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE matrix_property_type = SELECT
  (enumerated_matrix_property_type,
   application_defined_matrix_property_type);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE enumerated_matrix_property_type = ENUMERATION OF
     (stiffness,
      mass,
      damping);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE application_defined_matrix_property_type = STRING;
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE surface_matrix_property_type = SELECT
  (enumerated_surface_matrix_property_type,
   application_defined_matrix_property_type);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE enumerated_surface_matrix_property_type = ENUMERATION OF
     (membrane_direct,
      membrane_shear,
      bending_direct,
      bending_torsion,
      normal_to_plane_shear,
      membrane_direct_mass,
      membrane_shear_mass,
      bending_direct_mass,
      bending_torsion_mass,
      normal_to_plane_shear_mass,
      mass);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE curve_matrix_property_type = SELECT
  (enumerated_curve_matrix_property_type,
   application_defined_matrix_property_type);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE enumerated_curve_matrix_property_type = ENUMERATION OF
     (axial,
      y_y_bending,
      z_z_bending,
      torsion,
      x_y_shear,
      x_z_shear,
      warping,
      axial_mass,
      y_y_bending_mass,
      z_z_bending_mass,
      torsion_mass,
      x_y_shear_mass,
      x_z_shear_mass,
      warping_mass,
      mass);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE matrix_symmetry = ENUMERATION OF
     (symmetric,
      diagonal);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE degree_of_freedom = SELECT
  (enumerated_degree_of_freedom,
   application_defined_degree_of_freedom);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE enumerated_degree_of_freedom = ENUMERATION OF
     (x_translation, y_translation, z_translation,
      x_rotation, y_rotation, z_rotation,
      warp);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE application_defined_degree_of_freedom = STRING;
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE curve_element_freedom = SELECT
     (enumerated_curve_element_freedom,
      application_defined_degree_of_freedom);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE enumerated_curve_element_freedom = ENUMERATION OF
     (x_translation, y_translation, z_translation,
      x_rotation, y_rotation, z_rotation,
      warp,
      none);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE integration_rule = ENUMERATION OF
     (gaussian,
      simpson);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE shape_function = ENUMERATION OF
     (lagrangian,
      serendipity,
      hermitian,
      unspecified);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE volume_2d_element_representation = SELECT
  (axisymmetric_volume_2d_element_representation,
   plane_volume_2d_element_representation);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE surface_2d_element_representation = SELECT
  (axisymmetric_surface_2d_element_representation,
   plane_surface_2d_element_representation);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE curve_2d_element_representation = SELECT
  (axisymmetric_curve_2d_element_representation,
   plane_curve_2d_element_representation);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE volume_2d_element_descriptor = SELECT
     (axisymmetric_volume_2d_element_descriptor,
      plane_volume_2d_element_descriptor);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE surface_2d_element_descriptor = SELECT
     (axisymmetric_surface_2d_element_descriptor,
      plane_surface_2d_element_descriptor);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE curve_2d_element_descriptor = SELECT
     (axisymmetric_curve_2d_element_descriptor,
      plane_curve_2d_element_descriptor);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE volume_3d_element_coordinate_system = SELECT
  (arbitrary_volume_3d_element_coordinate_system,
   parametric_volume_3d_element_coordinate_system);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE volume_2d_element_coordinate_system = SELECT
  (arbitrary_volume_2d_element_coordinate_system,
   parametric_volume_2d_element_coordinate_system);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE surface_3d_element_coordinate_system = SELECT
  (aligned_surface_3d_element_coordinate_system,
   parametric_surface_3d_element_coordinate_system,
   constant_surface_3d_element_coordinate_system);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE surface_2d_element_coordinate_system = SELECT
  (aligned_surface_2d_element_coordinate_system,
   parametric_surface_2d_element_coordinate_system);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE curve_3d_element_coordinate_system = SELECT
  (aligned_curve_3d_element_coordinate_system,
   parametric_curve_3d_element_coordinate_system);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE curve_element_end_coordinate_system = SELECT
     (fea_axis2_placement_3d,
      curve_3d_element_coordinate_system);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE directionally_explicit_element_coordinate_system = SELECT
  (directionally_explicit_element_coordinate_system_arbitrary,
   directionally_explicit_element_coordinate_system_aligned);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE element_aspect = SELECT
     (element_volume,
      volume_3d_face,
      volume_2d_face,
      volume_3d_edge,
      volume_2d_edge,
      surface_3d_face,
      surface_2d_face,
      surface_3d_edge,
      surface_2d_edge,
      curve_edge);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE element_volume = ENUMERATION OF
     (volume);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE curve_edge = ENUMERATION OF
     (element_edge);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE node_or_node_group = SELECT
     (node_representation,
      node_group);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE element_or_element_group = SELECT
     (element_representation,
      element_group);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE volume_3d_element_field_integration = SELECT
  (element_integration_algebraic,
   volume_3d_element_field_integration_rule,
   volume_3d_element_field_integration_explicit);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE element_integration_algebraic = ENUMERATION OF (algebraic);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE volume_2d_element_field_integration = SELECT
  (element_integration_algebraic,
   volume_2d_element_field_integration_rule,
   volume_2d_element_field_integration_explicit);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE surface_3d_element_field_integration = SELECT
  (element_integration_algebraic,
   surface_3d_element_field_integration_rule,
   surface_3d_element_field_integration_explicit);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE surface_section_integration = SELECT
  (element_integration_algebraic,
   surface_section_integration_rule,
   surface_section_integration_explicit);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE surface_2d_element_length_integration = SELECT
  (element_integration_algebraic,
   surface_2d_element_length_integration_rule,
   surface_2d_element_length_integration_explicit);
END_TYPE;
(* USED FROM (structural_response_representation_schema); *)
TYPE curve_3d_element_length_integration = SELECT
  (element_integration_algebraic,
   curve_3d_element_length_integration_rule,
   curve_3d_element_length_integration_explicit);
END_TYPE;
(* USED FROM (mesh_topology_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE cell_shape = SELECT (
   cell_shape_0D,
   cell_shape_1D,
   cell_shape_2D,
   cell_shape_3D);
END_TYPE;

(* USED FROM (mesh_topology_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE cell_shape_0D = ENUMERATION OF (
   single);
END_TYPE;

(* USED FROM (mesh_topology_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE cell_shape_1D = ENUMERATION OF (
   line);
END_TYPE;

(* USED FROM (mesh_topology_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE cell_shape_2D = ENUMERATION OF (
   quadrilateral,
   triangle);
END_TYPE;

(* USED FROM (mesh_topology_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE cell_shape_3D = ENUMERATION OF (
   hexahedron,
   pyramid,
   tetrahedron,
   wedge);
END_TYPE;

(* USED FROM (mesh_topology_schema); *)
TYPE indices_group = SELECT
     (indices_list,
      indices_range);
END_TYPE;
(* USED FROM (mesh_topology_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE mesh_location = ENUMERATION OF (
   application_defined,
   cell_centre,
   edge_centre,
   face_centre,
   iface_centre,
   jface_centre,
   kface_centre,
   unspecified,
   vertices);
END_TYPE;

(* USED FROM (mesh_topology_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE mesh_maths_space_type = ENUMERATION OF (
   cells,
   vertices);
END_TYPE;

(* USED FROM (mesh_topology_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE structured_mesh_type = ENUMERATION OF (
   pentahedral,
   pyramidal,
   rectangular,
   tetrahedral);
END_TYPE;

(* USED FROM (basic_attribute_schema); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE description_attribute_select = SELECT (
   action_request_solution,
   application_context,
   approval_role,
   configuration_design,
   context_dependent_shape_representation,
   date_role,
   date_time_role,
   effectivity,
   external_source,
   organization_role,
   organizational_project,
   person_and_organization,
   person_and_organization_role,
   property_definition_representation,
   representation);
END_TYPE;


(* Pruned unused type: fd_bc_type_compound  *)

(* USED FROM (conditions_schema); *)
(* This ENUMERATION set has been expanded for EXPRESS E1 layout. *)
TYPE fd_bc_type_simple = mbna_bc_type_simple;
END_TYPE;

(* USED FROM (conditions_schema); *)
TYPE ijk_minmax = ENUMERATION OF 
     (i_min,
      j_min,
      k_min,
      i_max,
      j_max,
      k_max);
END_TYPE;
(* USED FROM (conditions_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE mbna_bc_type = SELECT (
   mbna_bc_type_compound,
   mbna_bc_type_simple);
END_TYPE;

(* USED FROM (conditions_schema); *)
(* This ENUMERATION set has been expanded for EXPRESS E1 layout. *)
TYPE mbna_bc_type_compound = ENUMERATION OF (
   application_defined,
   bc_farfield,
   bc_inflow,
   bc_outflow,
   unspecified);
END_TYPE;

(* USED FROM (conditions_schema); *)
(* This ENUMERATION set has been expanded for EXPRESS E1 layout. *)
TYPE mbna_bc_type_simple = ENUMERATION OF (
   application_defined,
   bc_axissymmetric_wedge,
   bc_degenerate_line,
   bc_degenerate_point,
   bc_Dirichlet,
   bc_extrapolate,
   bc_general,
   bc_inflow_subsonic,
   bc_inflow_supersonic,
   bc_Neumann,
   bc_outflow_subsonic,
   bc_outflow_supersonic,
   bc_symmetry_plane,
   bc_symmetry_polar,
   bc_tunnel_inflow,
   bc_tunnel_outflow,
   bc_wall,
   bc_wall_inviscid,
   bc_wall_viscous,
   bc_wall_viscous_heat_flux,
   bc_wall_viscous_isothermal,
   unspecified);
END_TYPE;

(* USED FROM (conditions_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE Riemann_1D_data_name = ENUMERATION OF (
   characteristic_acoustic_minus,
   characteristic_acoustic_plus,
   characteristic_entropy,
   characteristic_vorticity1,
   characteristic_vorticity2,
   Riemann_invariant_minus,
   Riemann_invariant_plus);
END_TYPE;

(* USED FROM (equations_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE fd_behaviour_models = SELECT (
   gas_model,
   turbulence_closure,
   turbulence_model,
   viscosity_model);
END_TYPE;

(* USED FROM (equations_schema); *)
(* This ENUMERATION set has been expanded for EXPRESS E1 layout. *)
TYPE fd_governing_equation_type = mbna_governing_equation_type;
END_TYPE;

(* USED FROM (equations_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE force_moment_data_name = ENUMERATION OF (
   coef_drag,
   coef_length,
   coef_lift,
   coef_moment_area,
   coef_moment_eta,
   coef_moment_phi,
   coef_moment_pressure_dynamic,
   coef_moment_r,
   coef_moment_theta,
   coef_moment_x,
   coef_moment_xi,
   coef_moment_y,
   coef_moment_z,
   coef_moment_zeta,
   drag,
   force_phi,
   force_r,
   force_theta,
   force_x,
   force_y,
   force_z,
   lift,
   moment_center_x,
   moment_center_y,
   moment_center_z,
   moment_eta,
   moment_phi,
   moment_r,
   moment_theta,
   moment_x,
   moment_xi,
   moment_y,
   moment_z,
   moment_zeta);
END_TYPE;

(* USED FROM (equations_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE gas_model_data_name = ENUMERATION OF (
   ideal_gas_constant,
   specific_heat_pressure,
   specific_heat_ratio,
   specific_heat_volume);
END_TYPE;

(* USED FROM (equations_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE gas_model_type = ENUMERATION OF (
   application_defined,
   ideal,
   unspecified,
   Van_der_Waals);
END_TYPE;

(* USED FROM (equations_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE mbna_behaviour_models = SELECT (
   thermal_conductivity_model);
END_TYPE;

(* USED FROM (equations_schema); *)
(* This ENUMERATION set has been expanded for EXPRESS E1 layout. *)
TYPE mbna_governing_equation_type = ENUMERATION OF (
   application_defined,
   Euler,
   full_potential,
   NS_laminar,
   NS_laminar_incompressible,
   NS_turbulent,
   NS_turbulent_incompressible,
   unspecified);
END_TYPE;

(* USED FROM (equations_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE thermal_conductivity_model_data_name = ENUMERATION OF (
   constant_Prandtl,
   power_law_exponent,
   Sutherland_constant_conductivity,
   temperature_reference,
   thermal_conductivity_reference);
END_TYPE;

(* USED FROM (equations_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE thermal_conductivity_model_type = ENUMERATION OF (
   application_defined,
   constant_Prandtl,
   independent,
   power_law,
   Sutherland_law,
   unspecified);
END_TYPE;

(* USED FROM (equations_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE turbulence_closure_data_name = ENUMERATION OF (
   eddy_viscosity,
   Prandtl_turbulent);
END_TYPE;

(* USED FROM (equations_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE turbulence_closure_type = ENUMERATION OF (
   application_defined,
   eddy_viscosity,
   Reynolds_stress,
   Reynolds_stress_algebraic,
   unspecified);
END_TYPE;

(* USED FROM (equations_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE turbulence_model_data_name = ENUMERATION OF (
   turbulent_BB_Reynolds,
   turbulent_dissipation,
   turbulent_dissipation_rate,
   turbulent_distance,
   turbulent_energy_kinetic,
   turbulent_SA_cb1,
   turbulent_SA_cb2,
   turbulent_SA_chi,
   turbulent_SA_ct1,
   turbulent_SA_ct2,
   turbulent_SA_ct3,
   turbulent_SA_ct4,
   turbulent_SA_cv1,
   turbulent_SA_cw1,
   turbulent_SA_cw2,
   turbulent_SA_cw3,
   turbulent_SA_kappa,
   turbulent_SA_nu_tilde,
   turbulent_SA_sigma);
END_TYPE;

(* USED FROM (equations_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE turbulence_model_type = ENUMERATION OF (
   algebraic_Baldwin_Lomax,
   algebraic_Cebeci_Smith,
   application_defined,
   half_equation_Johnson_King,
   one_equation_Baldwin_Barth,
   one_equation_Spalart_Allmaras,
   two_equation_Jones_Launder,
   two_equation_Menter_SST,
   two_equation_Wilcox,
   unspecified);
END_TYPE;

(* USED FROM (equations_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE viscosity_model_data_name = ENUMERATION OF (
   Sutherland_constant_viscosity,
   viscosity_molecular_reference);
END_TYPE;

(* USED FROM (equations_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE viscosity_model_type = ENUMERATION OF (
   application_defined,
   constant_viscosity,
   power_law,
   Sutherland_law,
   unspecified);
END_TYPE;

(* USED FROM (domain_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE coordinate_data_name = ENUMERATION OF (
   coordinate_eta,
   coordinate_normal,
   coordinate_phi,
   coordinate_r,
   coordinate_tangential,
   coordinate_theta,
   coordinate_transform,
   coordinate_x,
   coordinate_xi,
   coordinate_y,
   coordinate_z,
   coordinate_zeta);
END_TYPE;

(* USED FROM (mesh_connectivity_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE mismatched_region_type = ENUMERATION OF (
   abutting,
   overset);
END_TYPE;


(* Pruned unused type: pie_external_identification_item  *)


(* Pruned unused type: file_identification_item  *)


(* Pruned unused type: file_location_select  *)

(* USED FROM (External_item_identification_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE external_identification_item = SELECT (
   action_relationship,
   action_request_status,
   applied_organization_assignment,
   applied_person_and_organization_assignment,
   approval,
   approval_status,
   assembly_bond_definition,
   date_and_time_assignment,
   date_assignment,
   document_file,
   external_source,
   externally_defined_class,
   externally_defined_context_dependent_unit,
   externally_defined_conversion_based_unit,
   externally_defined_general_property,
   externally_defined_picture_representation_item,
   externally_defined_representation_item,
   generic_product_definition_reference,
   organizational_address,
   product_definition,
   security_classification,
   trimmed_curve,
   versioned_action_request);
END_TYPE;

(* USED FROM (support_resource_schema); *)
  TYPE identifier = STRING;
  END_TYPE;
(* USED FROM (product_property_definition_schema); *)
  TYPE characterized_product_definition = SELECT (
    product_definition, 
    product_definition_relationship);
  END_TYPE;

(* Pruned unused type: pprs_description_attribute_select  *)


(* Pruned unused type: pprs_name_attribute_select  *)

(* USED FROM (product_property_representation_schema); *)
  TYPE chained_representation_link = SELECT (mapped_item, representation_context, representation_relationship);
  END_TYPE;
(* USED FROM (product_property_representation_schema); *)
  TYPE represented_definition = SELECT (
    general_property, 
    property_definition, 
    property_definition_relationship, 
    shape_aspect, 
    shape_aspect_relationship);
  END_TYPE;
(* USED FROM (product_property_representation_schema); *)
  TYPE item_identified_representation_usage_select = SELECT (
    representation_item,
    list_representation_item,
    set_representation_item);
  END_TYPE;  

(* Pruned unused type: rs_description_attribute_select  *)


(* Pruned unused type: rs_id_attribute_select  *)

(* USED FROM (representation_schema); *)
  TYPE compound_item_definition = SELECT
    (list_representation_item,
     set_representation_item);
  END_TYPE;
(* USED FROM (representation_schema); *)
  TYPE founded_item_select = SELECT
    (founded_item,
     representation_item);
  END_TYPE;
(* USED FROM (representation_schema); *)
  TYPE list_representation_item = LIST [1:?] OF representation_item;
  END_TYPE;
(* USED FROM (representation_schema); *)
  TYPE set_representation_item = SET [1:?] OF representation_item;
  END_TYPE;
(* USED FROM (representation_schema); *)
  TYPE transformation = SELECT
    (item_defined_transformation,
     functionally_defined_transformation);
  END_TYPE;
(* USED FROM (Activity_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE action_items = SELECT (
   action,
   action_directive,
   action_method,
   action_property,
   action_relationship,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   applied_person_and_organization_assignment,
   applied_state_type_assignment,
   approval_status,
   assembly_component_usage_substitute,
   certification,
   certification_item,
   characterized_object,
   class,
   class_system,
   classification_item,
   configuration_design,
   configuration_effectivity,
   configuration_item,
   configured_effectivity_assignment,
   contract,
   document_file,
   document_reference_item,
   draughting_model,
   drawing_revision,
   evaluated_characteristic,
   executed_action,
   general_property,
   identification_item,
   material_designation,
   mechanical_design_geometric_presentation_representation,
   organization,
   organization_relationship,
   organizational_project,
   person_and_organization,
   presentation_area,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   requirement_assigned_item,
   requirement_for_action_resource,
   resource_property,
   security_classification,
   security_classification_level,
   shape_aspect,
   shape_representation,
   versioned_action_request);
END_TYPE;

(* USED FROM (results_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE flow_solution_data_name = ENUMERATION OF (
   density,
   density_stagnation,
   energy_internal,
   energy_kinetic,
   energy_stagnation,
   energy_stagnation_density,
   enthalpy,
   enthalpy_stagnation,
   entropy,
   entropy_approx,
   ideal_gas_constant,
   mass_flow,
   momentum_magnitude,
   momentum_x,
   momentum_y,
   momentum_z,
   potential,
   pressure,
   pressure_dynamic,
   pressure_stagnation,
   Reynolds_stress_xx,
   Reynolds_stress_xy,
   Reynolds_stress_xz,
   Reynolds_stress_yy,
   Reynolds_stress_yz,
   Reynolds_stress_zz,
   skin_friction_magnitude,
   skin_friction_x,
   skin_friction_y,
   skin_friction_z,
   specific_heat_pressure,
   specific_heat_volume,
   stream_function,
   temperature,
   temperature_stagnation,
   thermal_conductivity,
   velocity_angle_x,
   velocity_angle_y,
   velocity_angle_z,
   velocity_magnitude,
   velocity_normal,
   velocity_phi,
   velocity_r,
   velocity_sound,
   velocity_sound_stagnation,
   velocity_tangential,
   velocity_theta,
   velocity_unit_vector_x,
   velocity_unit_vector_y,
   velocity_unit_vector_z,
   velocity_x,
   velocity_y,
   velocity_z,
   viscosity_eddy,
   viscosity_kinematic,
   viscosity_molecular,
   vorticity_magnitude,
   vorticity_x,
   vorticity_y,
   vorticity_z);
END_TYPE;

(* USED FROM (basis_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE choose_general_property_identifier = SELECT (
   defined_data_name,
   externally_defined_item);
END_TYPE;

(* USED FROM (basis_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE choose_geometry_location = SELECT (
   externally_defined_item,
   shape_representation);
END_TYPE;

(* USED FROM (basis_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE choose_representation_context_identifier = SELECT (
   defined_data_class,
   externally_defined_item);
END_TYPE;

(* USED FROM (basis_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE defined_data_class = ENUMERATION OF (
   application_defined,
   dimensional,
   dimensionless_constant,
   dimensionless_parameter,
   normalise_by_unknown_dimensional,
   normalised_by_dimensional,
   unspecified);
END_TYPE;

(* USED FROM (basis_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE defined_data_name = SELECT (
   coordinate_data_name,
   fd_defined_data_name);
END_TYPE;

(* USED FROM (basis_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE fd_defined_data_name = SELECT (
   fd_nondimensional_parameter_name,
   flow_solution_data_name,
   force_moment_data_name,
   gas_model_data_name,
   Riemann_1D_data_name,
   thermal_conductivity_model_data_name,
   turbulence_closure_data_name,
   turbulence_model_data_name,
   viscosity_model_data_name);
END_TYPE;

(* USED FROM (basis_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE fd_nondimensional_parameter_name = ENUMERATION OF (
   coef_pressure,
   coef_pressure_dynamic,
   coef_pressure_reference,
   coef_skin_friction_x,
   coef_skin_friction_y,
   coef_skin_friction_z,
   length_reference,
   Mach,
   Mach_velocity,
   Mach_velocity_sound,
   Prandtl,
   Prandtl_specific_heat_pressure,
   Prandtl_thermal_conductivity,
   Prandtl_viscosity_molecular,
   Reynolds,
   Reynolds_length,
   Reynolds_velocity,
   Reynolds_viscosity_kinematic,
   specific_heat_ratio,
   specific_heat_ratio_pressure,
   specific_heat_ratio_volume);
END_TYPE;


(* Pruned unused type: mbna_property_distribution_select  *)


(* Pruned unused type: mbna_value_context_select  *)


(* Pruned unused type: state_definition_action_items  *)


(* Pruned unused type: state_definition_classification_item  *)


(* Pruned unused type: state_definition_identification_item  *)

(* USED FROM (action_and_model_relationships_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE discretised_action_model_select = SELECT (
   analysis_step,
   model_action_domain);
END_TYPE;

(* USED FROM (action_and_model_relationships_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE idealised_action_select = SELECT (
   action,
   physical_action_domain);
END_TYPE;

(* USED FROM (product_and_model_relationships_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE discretised_product_model_select = SELECT (
   fea_model,
   model_product_domain);
END_TYPE;

(* USED FROM (product_and_model_relationships_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE idealised_product_select = SELECT (
   physical_product_domain,
   product_definition);
END_TYPE;

(* USED FROM (property_distribution_and_model_relationships_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE discretised_distribution_model_select = SELECT (
   model_property_distribution,
   state_definition);
END_TYPE;

(* USED FROM (property_distribution_and_model_relationships_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE idealised_distribution_select = SELECT (
   domain_property,
   property_definition);
END_TYPE;

(* USED FROM (state_and_model_relationships_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE discretised_state_model_select = SELECT (
   model_state_domain,
   state);
END_TYPE;

(* USED FROM (state_and_model_relationships_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE idealised_state_select = SELECT (
   physical_state_domain,
   state_type);
END_TYPE;


(* Pruned unused type: document_location_select  *)


(* Pruned unused type: sm_approval_item  *)

(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE model_or_control_element = SELECT
     (element_representation,
      constraint_element);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE cylindrical_harmonic_number = INTEGER;
WHERE
  WR1: SELF >= 0;
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE volume_3d_face = INTEGER;
WHERE
  WR1: (SELF >= 1) AND (SELF <= 6);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE volume_2d_face = INTEGER;
WHERE
  WR1: (SELF >= 1) AND (SELF <= 4);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE volume_3d_edge = INTEGER;
WHERE
  WR1: (SELF >= 1) AND (SELF <= 12);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE volume_2d_edge = INTEGER;
WHERE
  WR1: (SELF >= 1) AND (SELF <= 4);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE surface_3d_face = INTEGER;
WHERE
  WR1: (SELF >= 1) AND (SELF <= 2);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE surface_3d_edge = INTEGER;
WHERE
  WR1: (SELF >= 1) AND (SELF <= 4);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE surface_2d_face = INTEGER;
WHERE
  WR1: (SELF >= 1) AND (SELF <= 2);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE surface_2d_edge = INTEGER;
WHERE
  WR1: (SELF >= 1) AND (SELF <= 2);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE field_value = SELECT 
  (unspecified_value,
   scalar,
   tensor1_2d,
   tensor1_3d,
   anisotropic_symmetric_tensor2_2d,
   isotropic_symmetric_tensor2_3d,
   orthotropic_symmetric_tensor2_3d,
   anisotropic_symmetric_tensor2_3d);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE unspecified_value = ENUMERATION OF
  (unspecified);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE measure_or_unspecified_value = SELECT
  (context_dependent_measure,
   unspecified_value);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE boundary_variable = SELECT
   (boundary_surface_scalar_variable,
   boundary_surface_vector_3d_variable,
   application_defined_scalar_variable,
   application_defined_vector_3d_variable);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE boundary_aggregated_variable = SELECT
   (aggregated_vector_3d_variable,
   application_defined_vector_3d_variable);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE volume_variable = SELECT 
  (volume_scalar_variable,
   volume_angular_variable,
   volume_vector_3d_variable,
   volume_tensor2_3d_variable,
   application_defined_scalar_variable,
   application_defined_vector_3d_variable,
   application_defined_tensor2_3d_variable);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE volume_aggregated_variable = SELECT 
  (aggregated_scalar_variable,
   aggregated_angular_variable,
   aggregated_vector_3d_variable,
   aggregated_tensor2_3d_variable,
   application_defined_scalar_variable,
   application_defined_vector_3d_variable,
   application_defined_tensor2_3d_variable);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE surface_element_variable = SELECT
  (volume_variable,
   surface_scalar_variable,
   surface_vector_2d_variable,
   surface_vector_3d_variable,
   surface_tensor2_2d_variable,
   application_defined_tensor2_2d_variable);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE boundary_edge_variable = SELECT
   (boundary_curve_scalar_variable,
    boundary_curve_vector_3d_variable,
    application_defined_scalar_variable,
    application_defined_vector_3d_variable);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE curve_element_variable = SELECT
  (volume_variable,
   curve_scalar_variable,
   curve_vector_2d_variable,
   application_defined_vector_2d_variable,
   curve_vector_3d_variable);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE curve_scalar_variable = ENUMERATION OF 
     (curve_axial_force,
      curve_axial_strain,
      torque,
      curve_warping,
      bi_moment,
      twist);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE surface_scalar_variable = ENUMERATION OF 
     (thickness,
      surface_thermal_gradient,
      reference_surface_thermal_gradient);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE volume_scalar_variable = ENUMERATION OF 
     (temperature,
      moisture,
      reference_temperature,
      strain_energy_per_unit_volume);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE boundary_curve_scalar_variable = ENUMERATION OF 
     (normal_force_per_unit_length);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE boundary_surface_scalar_variable = ENUMERATION OF 
     (pressure);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE aggregated_scalar_variable = ENUMERATION OF 
     (total_strain_energy,
      mass,
      volume);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE volume_angular_variable = ENUMERATION OF 
     (constant_angular_acceleration,
      application_defined_angular_scalar_variable);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE aggregated_angular_variable = ENUMERATION OF 
      (total_applied_moment,
       application_defined_aggregated_angular_scalar_variable);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE application_defined_scalar_variable = STRING;
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE curve_vector_2d_variable = ENUMERATION OF 
     (curve_shear_force,
      curve_bending_moment,
      curve_element_curvature,
      curve_thermal_gradient,
      reference_curve_thermal_gradient);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE surface_vector_2d_variable = ENUMERATION OF 
     (surface_out_of_plane_shear_force,
      surface_out_of_plane_shear_strain);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE application_defined_vector_2d_variable = STRING;
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE curve_vector_3d_variable = ENUMERATION OF 
     (applied_force_per_unit_length,
      applied_moment_per_unit_length);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE surface_vector_3d_variable = ENUMERATION OF 
     (applied_force_per_unit_area,
      applied_moment_per_unit_area);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE volume_vector_3d_variable = ENUMERATION OF 
     (position,
      applied_force_per_unit_volume,
      applied_moment_per_unit_volume,
      displacement,
      infinitesimal_rotation,
      acceleration);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE boundary_curve_vector_3d_variable = ENUMERATION OF 
     (applied_force_per_unit_length,
      applied_moment_per_unit_length);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE boundary_surface_vector_3d_variable = ENUMERATION OF 
     (applied_force_per_unit_area,
      applied_moment_per_unit_area);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE aggregated_vector_3d_variable = ENUMERATION OF 
     (total_applied_force,
      centre_of_mass_offset);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE application_defined_vector_3d_variable = STRING;
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE surface_tensor2_2d_variable = ENUMERATION OF 
     (surface_membrane_force,
      surface_membrane_strain,
      surface_bending_moment,
      surface_curvature);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE application_defined_tensor2_2d_variable = STRING;
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE volume_tensor2_3d_variable = ENUMERATION OF 
     (total_strain,
      stress);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE aggregated_tensor2_3d_variable = ENUMERATION OF 
     (rotational_inertia);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE application_defined_tensor2_3d_variable = STRING;
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE message_level = ENUMERATION OF 
     (error,
      warning,
      note);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE surface_3d_state_coordinate_system = SELECT
     (fea_axis2_placement_3d,
      surface_3d_element_coordinate_system);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE surface_2d_state_coordinate_system = SELECT
     (fea_axis2_placement_3d,
      surface_2d_element_coordinate_system);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE curve_3d_state_coordinate_system = SELECT
     (fea_axis2_placement_3d,
      curve_3d_element_coordinate_system);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE curve_2d_state_coordinate_system = SELECT
     (fea_axis2_placement_3d,
      curve_2d_element_coordinate_system);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE action_type = ENUMERATION OF
     (applied_loads,
      residual_loads);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE volume_3d_element_output_reference = SELECT
     (volume_3d_element_representation,
      volume_3d_element_descriptor,
      volume_3d_element_group,
      volume_3d_substructure_element_reference,
      analysis_item_within_representation);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE volume_2d_element_output_reference = SELECT
     (volume_2d_element_representation,
      volume_2d_element_descriptor,
      volume_2d_element_group,
      volume_2d_substructure_element_reference,
      analysis_item_within_representation);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE surface_3d_element_output_reference = SELECT
     (surface_3d_element_representation,
      surface_3d_element_descriptor,
      surface_3d_element_group,
      surface_3d_substructure_element_reference,
      analysis_item_within_representation);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE surface_2d_element_output_reference = SELECT
     (surface_2d_element_representation,
      surface_2d_element_descriptor,
      surface_2d_element_group,
      surface_2d_substructure_element_reference,
      analysis_item_within_representation);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE curve_3d_element_output_reference = SELECT
     (curve_3d_element_representation,
      curve_3d_element_descriptor,
      curve_3d_element_group,
      curve_3d_substructure_element_reference,
      analysis_item_within_representation);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE curve_2d_element_output_reference = SELECT
     (curve_2d_element_representation,
      curve_2d_element_descriptor,
      curve_2d_element_group,
      curve_2d_substructure_element_reference,
      analysis_item_within_representation);
END_TYPE;
(* USED FROM (finite_element_analysis_control_and_result_schema); *)
TYPE node_output_reference = SELECT
     (node_representation,
      node_group,
      substructure_node_reference,
      analysis_item_within_representation);
END_TYPE;
(* USED FROM (Group_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE groupable_item = SELECT (
   address,
   applied_approval_assignment,
   applied_classification_assignment,
   applied_document_reference,
   applied_external_identification_assignment,
   applied_group_assignment,
   applied_identification_assignment,
   applied_name_assignment,
   applied_organization_assignment,
   applied_person_and_organization_assignment,
   applied_security_classification_assignment,
   approval,
   approval_person_organization,
   approval_relationship,
   approval_status,
   assembly_component_usage,
   calendar_date,
   class,
   collection_assignment,
   collection_membership,
   component_feature,
   control,
   coordinated_universal_time_offset,
   date_and_time,
   date_and_time_assignment,
   date_assignment,
   derived_unit,
   derived_unit_element,
   document_file,
   document_relationship,
   external_source,
   fea_model,
   general_property,
   general_property_relationship,
   geometric_representation_item,
   group,
   group_relationship,
   local_time,
   mapped_item,
   measure_qualification,
   measure_with_unit,
   multi_language_attribute_assignment,
   named_unit,
   numerical_model,
   organization,
   organization_relationship,
   package_product_concept_feature,
   person,
   person_and_organization,
   precision_qualifier,
   product,
   product_concept_feature,
   product_definition,
   product_definition_context,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_group_assignment,
   product_definition_relationship,
   product_relationship,
   property_definition,
   property_definition_representation,
   representation,
   representation_context,
   representation_item,
   representation_relationship,
   representation_relationship_with_transformation,
   result,
   security_classification,
   shape_aspect,
   shape_aspect_relationship,
   shape_representation_relationship,
   state,
   state_definition,
   state_relationship,
   styled_item,
   topological_representation_item,
   type_qualifier,
   uncertainty_qualifier);
   WHERE
  WR1: NOT ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.GROUP' IN TYPEOF(SELF));
END_TYPE; 

(* Pruned unused type: effectivity_item_for_replacement  *)

(* USED FROM (Effectivity_application_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE effectivity_item = SELECT (
   action,
   action_method,
   action_method_relationship,
   action_property,
   action_relationship,
   assembly_component_usage_substitute,
   class,
   class_system,
   configuration_design,
   configuration_item,
   configured_effectivity_assignment,
   document_file,
   draughting_model,
   drawing_revision,
   general_property,
   material_designation,
   mechanical_design_geometric_presentation_representation,
   presentation_area,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   requirement_for_action_resource,
   resource_property,
   security_classification,
   shape_aspect,
   shape_representation);
END_TYPE;

(* USED FROM (Product_occurrence_mim); *)
  TYPE product_definition_or_assembly_relationship = SELECT (assembly_component_usage, product_definition);
  END_TYPE;

(* Pruned unused type: at_requirement_assigned_item  *)


(* Pruned unused type: at_external_identification_item  *)


(* Pruned unused type: cf_groupable_item  *)

(* USED FROM (Requirement_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE requirement_assigned_item = SELECT (
   assembly_joint,
   configuration_item,
   descriptive_representation_item,
   product,
   product_class,
   product_definition,
   product_definition_formation,
   product_definition_relationship,
   representation,
   shape_aspect);
END_TYPE;

(* USED FROM (Requirement_assignment_mim); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE requirement_satisfaction_item = SELECT (
   requirement_assigned_item);
END_TYPE;

(* USED FROM (Requirement_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE requirement_source_item = SELECT (
   characterized_object,
   group,
   group_relationship,
   product,
   product_definition,
   product_definition_formation,
   product_definition_relationship,
   shape_aspect);
END_TYPE;


(* Pruned unused type: bc_external_identification_item  *)

(* USED FROM (product_data_quality_criteria_schema); *)
  TYPE detailed_report_type = ENUMERATION OF
    (measured_element,
     inferior_quality_element);
  END_TYPE;
(* USED FROM (product_data_quality_criteria_schema); *)
  TYPE summary_report_type = ENUMERATION OF
    (unspecified,
     conclusion_only,
     number_of_quality_defects,
     number_of_inspections_and_conclusion,
     full_statistics);
  END_TYPE;
(* USED FROM (product_data_quality_criteria_schema); *)
  TYPE preferred_ordering = ENUMERATION OF
    (extremity_order,
     detected_order);
  END_TYPE;

(* Pruned unused type: pdq_date_and_time_item  *)


(* Pruned unused type: ap209e2_analysis_approval_item  *)


(* Pruned unused type: pdq_date_item  *)


(* Pruned unused type: pqd_organization_item  *)

(* USED FROM (product_data_quality_definition_schema); *)
  TYPE used_quality_representation_select = SELECT
    (data_quality_criteria_representation,
     data_quality_inspection_result_representation);
  END_TYPE;
(* USED FROM (product_data_quality_inspection_result_schema); *)
  TYPE statistical_value_type = ENUMERATION OF
    (number_of_inspected_instances,
     number_of_quality_defects_detected);
  END_TYPE;
(* USED FROM (product_data_quality_inspection_result_schema); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE inspected_element_select = SELECT (
   assembly_component_usage,
   axis2_placement_3d,
   b_spline_or_composite_curve_select,
   b_spline_or_rectangular_composite_surface_select,
   cartesian_transformation_operator_3d,
   closed_or_open_shell_select,
   connected_face_set,
   curve,
   direction,
   edge_curve,
   edge_loop,
   face_surface,
   global_uncertainty_assigned_context,
   global_unit_assigned_context,
   group,
   manifold_solid_brep,
   placement,
   point,
   presentation_layer_assignment,
   representation_item,
   styled_item,
   surface,
   vertex_point);
END_TYPE;

(* USED FROM (shape_data_quality_criteria_schema); *)
  TYPE shape_data_quality_assessment_specification_select = SELECT
    (shape_data_quality_assessment_by_logical_test,
     shape_data_quality_assessment_by_numerical_test);
  END_TYPE; 
(* USED FROM (shape_data_quality_criteria_schema); *)
  TYPE shape_data_quality_value_limit_type_select = SELECT
    (shape_data_quality_value_range,
     shape_data_quality_value_limit);
  END_TYPE;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
 TYPE measured_value_select = SELECT
   (boolean_value,
    measure_value,
    plane_angle_and_ratio_pair,
    plane_angle_and_length_pair);
 END_TYPE;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
 TYPE boolean_value = BOOLEAN;
 END_TYPE;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
 TYPE location_of_extreme_value_select = SELECT
   (inspected_shape_element_select,
    b_spline_surface_knot_locator,
    b_spline_curve_knot_locator,
    b_spline_curve_segment,
    b_spline_surface_strip,
    b_spline_surface_patch,
    composite_curve_transition_locator,
    rectangular_composite_surface_transition_locator,
    boundary_curve_of_b_spline_or_rectangular_composite_surface,
    oriented_edge,
    face_bound,
    point_on_edge_curve,
    point_on_face_surface,
    subedge,
    subface);
 END_TYPE;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE inspected_shape_element_select = inspected_element_select;
END_TYPE;

(* USED FROM (shape_data_quality_inspection_result_schema); *)
 TYPE closed_or_open_shell_select = SELECT
   (closed_shell,
    open_shell);
 END_TYPE;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
 TYPE b_spline_or_composite_curve_select = SELECT
   (b_spline_curve,
    composite_curve);
 END_TYPE;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
 TYPE b_spline_or_rectangular_composite_surface_select = SELECT
   (b_spline_surface,
    rectangular_composite_surface);
 END_TYPE;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
  TYPE u_or_v_parameter = ENUMERATION OF
   (u_parameter,
    v_parameter);
 END_TYPE;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
TYPE surface_boundary_type = ENUMERATION OF
   (u_parameter_min,
    v_parameter_min,
    u_parameter_max,
    v_parameter_max);
 END_TYPE;

(* Pruned unused type: appearance_representation_identification_item  *)

(* USED FROM (presentation_appearance_schema); *)
  TYPE style_context_select = SELECT
    (group,
     presentation_layer_assignment,
     presentation_set,
     representation,
     representation_item,
     representation_relationship);
  END_TYPE;

(* Pruned unused type: ecdq_document_reference_item  *)

(* USED FROM (Document_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE document_reference_item = SELECT (
   action_directive,
   action_method,
   action_relationship,
   applied_action_assignment,
   applied_external_identification_assignment,
   approval,
   assembly_component_usage,
   certification,
   characterized_class,
   characterized_object,
   class,
   class_system,
   configuration_design,
   configuration_item,
   contract,
   descriptive_representation_item,
   dimensional_size,
   executed_action,
   externally_conditioned_data_quality_criterion,
   externally_defined_dimension_definition,
   externally_defined_item,
   feature_definition,
   general_property,
   group,
   group_relationship,
   information_right,
   information_usage_right,
   material_designation,
   measure_representation_item,
   organization,
   organizational_project,
   person,
   presentation_area,
   process_plan,
   product,
   product_category,
   product_concept,
   product_concept_feature,
   product_concept_feature_category,
   product_definition,
   product_definition_context,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_process,
   product_definition_relationship,
   product_definition_substitute,
   product_related_product_category,
   property_definition,
   representation,
   representation_item,
   resource_requirement_type,
   retention,
   rule_set,
   security_classification,
   shape_aspect,
   shape_aspect_relationship,
   usage_association,
   versioned_action_request);
END_TYPE;

(* USED FROM (explicit_constraint_schema); *)
TYPE constraint_group_member = SELECT
  (explicit_constraint,
   simultaneous_constraint_group);
END_TYPE;
(* USED FROM (explicit_geometric_constraint_schema); *)
TYPE geometric_constraint_element = SELECT
  (point,
   curve,
   surface,
   vector,
   direction);
END_TYPE;
(* USED FROM (explicit_geometric_constraint_schema); *)
TYPE point_curve_or_surface_constraint_element = SELECT
  (point,
   curve,
   surface);
END_TYPE;
(* USED FROM (explicit_geometric_constraint_schema); *)
TYPE curve_or_surface_constraint_element = SELECT
  (curve,
   surface);
END_TYPE;
(* USED FROM (explicit_geometric_constraint_schema); *)
TYPE linear_geometry_constraint_element = SELECT
  (line,
   plane,
   direction,
   vector);
END_TYPE;
(* USED FROM (explicit_geometric_constraint_schema); *)
TYPE radial_geometry_constraint_element = SELECT
  (circle,
   cylindrical_surface,
   conical_surface,
   spherical_surface,
   right_circular_cylinder,
   right_circular_cone,
   sphere);
END_TYPE;
(* USED FROM (explicit_geometric_constraint_schema); *)
TYPE axial_geometry_constraint_element = SELECT
  (point,
   line,
   circle,
   plane,
   cylindrical_surface,
   conical_surface,
   spherical_surface,
   toroidal_surface,
   surface_of_revolution,
   sphere,
   right_circular_cone,
   right_circular_cylinder,
   torus,
   revolved_face_solid,
   revolved_area_solid);
END_TYPE;
(* USED FROM (explicit_geometric_constraint_schema); *)
TYPE swept_surface_or_solid = SELECT
  (swept_surface,
   swept_face_solid,
   swept_area_solid);
END_TYPE;
(* USED FROM (explicit_geometric_constraint_schema); *)
TYPE tangent_contact_type = ENUMERATION OF
  (point_contact,
   curve_contact,
   surface_contact);
END_TYPE;
(* USED FROM (explicit_geometric_constraint_schema); *)
TYPE parallel_offset_type = ENUMERATION OF
  (curve_2d_offset,
   curve_3d_offset,
   surface_offset);
END_TYPE;
(* USED FROM (Specification_document_mim); *)
  TYPE document_identifier_assigned_item = SELECT
    (document);
  END_TYPE;

(* Pruned unused type: sd_document_reference_item  *)


(* Pruned unused type: machining_feature_definition  *)

(* USED FROM (kinematic_analysis_control_and_result_schema); *)
TYPE kinematic_analysis_definition = SELECT
  (interpolated_configuration_sequence,
   prescribed_path);
END_TYPE;
(* USED FROM (kinematic_analysis_control_and_result_schema); *)
TYPE kinematic_result = SELECT
  (interpolated_configuration_sequence,
   resulting_path);
END_TYPE;
(* USED FROM (Specification_control_mim); *)
  TYPE class_usage_effectivity_context_item = SELECT
    (product_definition);
  END_TYPE;

(* Pruned unused type: effectivity_specification_for_replacement  *)

(* USED FROM (Specification_control_mim); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE instance_usage_context_select = SELECT (
   product_definition_relationship,
   product_definition_usage);
END_TYPE;

(* USED FROM (geometric_model_schema); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE bounded_primitive_2d = SELECT (
   area_with_outer_boundary,
   circular_area,
   elliptic_area,
   path_area_with_parameters,
   polygonal_area,
   rectangular_area);
END_TYPE;


(* Pruned unused type: pr_action_items  *)


(* Pruned unused type: pr_date_and_time_item  *)


(* Pruned unused type: pr_document_reference_item  *)


(* Pruned unused type: pr_identification_item  *)


(* Pruned unused type: pr_organization_item  *)


(* Pruned unused type: pr_person_and_organization_item  *)

(* USED FROM (Production_rule_mim); *)
TYPE rule_superseded_item = SELECT
     (product_definition_formation);
END_TYPE;

(* Pruned unused type: product_as_individual_identification_item  *)


(* Pruned unused type: as_description_attribute_select  *)


(* Pruned unused type: as_name_attribute_select  *)


(* Pruned unused type: classification_classification_item  *)

(* USED FROM (Classification_with_attributes_mim); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE classified_item = SELECT (
   product,
   product_definition,
   product_definition_formation);
END_TYPE;


(* Pruned unused type: cwa_identification_item  *)


(* Pruned unused type: plib_class_identification_item  *)


(* Pruned unused type: plib_class_organization_item  *)


(* Pruned unused type: ir_approval_item  *)


(* Pruned unused type: ir_contract_item  *)


(* Pruned unused type: ir_date_and_time_item  *)


(* Pruned unused type: ir_date_item  *)


(* Pruned unused type: ir_identification_item  *)


(* Pruned unused type: ir_organization_item  *)


(* Pruned unused type: ir_person_and_organization_item  *)

(* USED FROM (Information_rights_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE ir_usage_item = action_items;
END_TYPE;


(* Pruned unused type: pdpdms_person_and_organization_item  *)


(* Pruned unused type: pdpdms_external_identification_item  *)


(* Pruned unused type: pdm_action_items  *)


(* Pruned unused type: pdm_action_request_item  *)


(* Pruned unused type: pdm_approval_item  *)


(* Pruned unused type: pdm_attribute_language_item  *)


(* Pruned unused type: pdm_certification_item  *)


(* Pruned unused type: pdm_classification_item  *)


(* Pruned unused type: pdm_date_and_time_item  *)


(* Pruned unused type: pdm_date_item  *)


(* Pruned unused type: pdm_document_reference_item  *)


(* Pruned unused type: pdm_effectivity_item  *)


(* Pruned unused type: pdm_event_occurrence_item  *)


(* Pruned unused type: pdm_external_class_name_item  *)


(* Pruned unused type: pdm_identification_item  *)


(* Pruned unused type: pdm_multi_language_attribute_item  *)


(* Pruned unused type: pdm_organization_item  *)


(* Pruned unused type: pdm_person_and_organization_item  *)


(* Pruned unused type: pdm_project_item  *)


(* Pruned unused type: pdm_security_classification_item  *)


(* Pruned unused type: pdm_time_interval_item  *)

(* USED FROM (Activity_method_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE action_method_items = SELECT (
   action,
   action_method,
   action_property,
   applied_action_assignment,
   configuration_design,
   contract,
   document_file,
   event_occurrence,
   organization,
   organizational_project,
   person,
   person_and_organization,
   product,
   product_concept,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   property_definition);
END_TYPE;

(* USED FROM (Attribute_classification_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE attribute_classification_item = SELECT (
   action_directive,
   action_method,
   action_property,
   action_property_representation,
   action_relationship,
   action_request_solution,
   action_request_status,
   alternate_product_relationship,
   applied_action_assignment,
   applied_action_request_assignment,
   applied_approval_assignment,
   applied_certification_assignment,
   applied_document_reference,
   applied_document_usage_constraint_assignment,
   applied_effectivity_assignment,
   applied_event_occurrence_assignment,
   applied_external_identification_assignment,
   applied_identification_assignment,
   applied_organization_assignment,
   applied_organizational_project_assignment,
   applied_person_and_organization_assignment,
   approval,
   approval_person_organization,
   approval_relationship,
   approval_status,
   certification,
   context_dependent_unit,
   contract,
   date_and_time_assignment,
   date_assignment,
   derived_unit,
   descriptive_representation_item,
   document_file,
   document_relationship,
   effectivity,
   event_occurrence_relationship,
   executed_action,
   general_property,
   general_property_relationship,
   group,
   group_relationship,
   information_right,
   information_usage_right,
   language,
   measure_representation_item,
   measure_with_unit,
   named_unit,
   organization_relationship,
   organizational_address,
   organizational_project_relationship,
   person_and_organization,
   person_and_organization_address,
   product,
   product_category,
   product_concept,
   product_concept_context,
   product_definition,
   product_definition_context,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   property_definition,
   property_definition_relationship,
   property_definition_representation,
   representation,
   representation_context,
   representation_item,
   security_classification,
   time_interval_relationship,
   uncertainty_measure_with_unit,
   usage_association,
   versioned_action_request);
END_TYPE;

(* USED FROM (Associative_draughting_elements_mim); *)
TYPE draughting_model_item_association_select = SELECT (
  annotation_occurrence,
  draughting_callout);
END_TYPE;
(* USED FROM (Associative_draughting_elements_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE draughting_model_item_definition = SELECT (
   applied_action_assignment,
   applied_action_method_assignment,
   applied_action_request_assignment,
   applied_approval_assignment,
   applied_certification_assignment,
   applied_classification_assignment,
   applied_contract_assignment,
   applied_date_and_time_assignment,
   applied_date_assignment,
   applied_document_reference,
   applied_document_usage_constraint_assignment,
   applied_effectivity_assignment,
   applied_event_occurrence_assignment,
   applied_external_identification_assignment,
   applied_group_assignment,
   applied_identification_assignment,
   applied_ineffectivity_assignment,
   applied_name_assignment,
   applied_organization_assignment,
   applied_organizational_project_assignment,
   applied_person_and_organization_assignment,
   applied_security_classification_assignment,
   applied_time_interval_assignment,
   applied_usage_right,
   dimensional_size,
   geometric_tolerance,
   product_definition_relationship,
   product_definition_shape,
   property_definition,
   shape_aspect,
   shape_aspect_relationship);
END_TYPE;


(* Pruned unused type: aade_annotation_representation_select  *)


(* Pruned unused type: aade_invisibility_context  *)

(* USED FROM (aic_associative_draughting_elements); *)
  TYPE draughting_model_item_select = SELECT
    (mapped_item,
     styled_item,
     axis2_placement,
     camera_model,
     draughting_callout);
  END_TYPE;  
(* USED FROM (product_property_definition_schema); *)
  TYPE shape_definition = SELECT (product_definition_shape, shape_aspect, shape_aspect_relationship);
  END_TYPE;

(* Pruned unused type: dse_shape_model  *)

(* USED FROM (Construction_geometry_mim); *)
  TYPE constructive_geometry_representation_or_shape_represenation = SELECT
    (constructive_geometry_representation,
    shape_representation);
  END_TYPE;

(* Pruned unused type: sd_id_attribute_select  *)

(* USED FROM (shape_dimension_schema); *)
TYPE angle_relator = ENUMERATION OF 
   (equal,
    large,
    small);
END_TYPE; 
(* USED FROM (shape_dimension_schema); *)
TYPE dimensional_characteristic = SELECT
   (dimensional_location, 
    dimensional_size);
END_TYPE; 

(* Pruned unused type: sds_item_identified_representation_usage_definition  *)

(* USED FROM (shape_dimension_schema); *)
TYPE shape_dimension_representation_item = SELECT
   (compound_representation_item, 
    descriptive_representation_item, 
    measure_representation_item,
    placement);
END_TYPE; 
(* USED FROM (shape_tolerance_schema); *)
TYPE tolerance_method_definition = SELECT
   (limits_and_fits, 
    tolerance_value);
END_TYPE; 
(* USED FROM (aic_draughting_annotation); *)
TYPE draughting_subfigure_representation_item = SELECT (
	annotation_occurrence,
	draughting_callout,
	axis2_placement);
END_TYPE;
(* USED FROM (aic_draughting_annotation); *)
TYPE draughting_symbol_representation_item = SELECT (
	annotation_curve_occurrence,
	annotation_symbol_occurrence,
	annotation_fill_area_occurrence,
	annotation_text_occurrence,
	axis2_placement);
END_TYPE;
(* USED FROM (Presentation_hierarchy_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE presented_item_select = SELECT (
   action,
   action_method,
   action_relationship,
   product_concept,
   product_concept_feature,
   product_concept_feature_category,
   product_definition,
   product_definition_formation,
   product_definition_relationship);
END_TYPE;

(* USED FROM (drawing_definition_schema); *)
TYPE draughting_titled_item = SELECT 
  (drawing_revision,
   drawing_sheet_revision);
END_TYPE;

(* Pruned unused type: s_name_attribute_select  *)

(* USED FROM (measure_schema); *)
  TYPE absorbed_dose_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
TYPE acceleration_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE radioactivity_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
TYPE amount_of_substance_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE area_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE celsius_temperature_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE context_dependent_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE count_measure = NUMBER;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE descriptive_measure = STRING;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE capacitance_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE dose_equivalent_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE electric_charge_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE electric_current_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE conductance_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE electric_potential_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE energy_measure = REAL;
  END_TYPE;  
(* USED FROM (measure_schema); *)
  TYPE force_measure = REAL;
  END_TYPE;  
(* USED FROM (measure_schema); *)
  TYPE frequency_measure = REAL;
  END_TYPE; 
(* USED FROM (measure_schema); *)
  TYPE magnetic_flux_density_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE illuminance_measure = REAL;
  END_TYPE;  
(* USED FROM (measure_schema); *)
  TYPE inductance_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE length_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE luminous_intensity_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE luminous_flux_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE mass_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE measure_value = SELECT 
    (absorbed_dose_measure,
     dose_equivalent_measure,
     radioactivity_measure,
     acceleration_measure,
     amount_of_substance_measure, 
     area_measure, 
     celsius_temperature_measure, 
     context_dependent_measure, 
     count_measure, 
     descriptive_measure, 
     capacitance_measure,
     electric_charge_measure,
     conductance_measure,
     electric_current_measure, 
     electric_potential_measure,
     energy_measure,
     magnetic_flux_density_measure,
     force_measure,
     frequency_measure,
     illuminance_measure,
     inductance_measure,
     length_measure, 
     luminous_flux_measure,
     luminous_intensity_measure, 
     magnetic_flux_measure,
     mass_measure, 
     numeric_measure, 
     non_negative_length_measure,
     parameter_value, 
     plane_angle_measure, 
     positive_length_measure, 
     positive_plane_angle_measure, 
     positive_ratio_measure, 
     power_measure,
     pressure_measure,
     ratio_measure, 
     resistance_measure,
     solid_angle_measure, 
     thermodynamic_temperature_measure, 
     time_measure, 
     velocity_measure,
     volume_measure);
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE magnetic_flux_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE non_negative_length_measure = length_measure;
   WHERE
    WR1: SELF >= 0.0;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE numeric_measure = NUMBER;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE parameter_value = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE plane_angle_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE positive_length_measure = non_negative_length_measure;
    WHERE
      WR1: SELF > 0.0;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE positive_plane_angle_measure = plane_angle_measure;
    WHERE
      WR1: SELF > 0.0;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE positive_ratio_measure = ratio_measure;
    WHERE
      WR1: SELF > 0.0;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE power_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE pressure_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE ratio_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE resistance_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE si_prefix = ENUMERATION OF (exa, peta, tera, giga, mega, kilo, hecto, deca, deci, centi, milli, micro, nano, pico, femto, atto);
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE si_unit_name = ENUMERATION OF (metre, gram, second, ampere, kelvin, mole, candela, radian, steradian, hertz, newton, pascal, joule, watt, coulomb, volt, farad, ohm, siemens, weber, tesla, henry, degree_Celsius, lumen, lux, becquerel, gray, sievert);
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE solid_angle_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE thermodynamic_temperature_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE time_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE unit = SELECT (derived_unit, named_unit);
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE velocity_measure = REAL;
  END_TYPE;
(* USED FROM (measure_schema); *)
  TYPE volume_measure = REAL;
  END_TYPE;

(* Pruned unused type: eu_external_identification_item  *)


(* Pruned unused type: el_external_identification_item  *)


(* Chained implicit interfaced from: date_time_schema *)
TYPE date_time_select = SELECT
   (date, 
    date_and_time, 
    local_time);
END_TYPE; 
(* USED FROM (shape_aspect_definition_schema); *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE simple_datum_reference_modifier = ENUMERATION OF (
   any_cross_section,
   any_longitudinal_section,
   basic,
   contacting_feature,
   degree_of_freedom_constraint_u,
   degree_of_freedom_constraint_v,
   degree_of_freedom_constraint_w,
   degree_of_freedom_constraint_x,
   degree_of_freedom_constraint_y,
   degree_of_freedom_constraint_z,
   distance_variable,
   free_state,
   least_material_requirement,
   line,
   major_diameter,
   maximum_material_requirement,
   minor_diameter,
   orientation,
   pitch_diameter,
   plane,
   point,
   translation);
END_TYPE;

(* USED FROM (aic_mechanical_design_geometric_presentation); *)
  TYPE mechanical_design_geometric_presentation_area_items = SELECT(
    axis2_placement,
    mapped_item);
  END_TYPE;
(* USED FROM (aic_mechanical_design_geometric_presentation); *)
  TYPE mechanical_design_geometric_presentation_representation_items = SELECT(
    axis2_placement,
    camera_model_d3,
    mapped_item,
    styled_item);
  END_TYPE;
(* USED FROM (solid_shape_element_schema); *)
TYPE trim_condition_select = SELECT 
  (length_measure,
   plane_angle_measure,   
   generalized_surface_select,
   solid_model);
END_TYPE;
(* USED FROM (solid_shape_element_schema); *)
TYPE trim_intent = ENUMERATION OF
  (blind,
   offset,
   through_all,
   unspecified,
   up_to_next);
END_TYPE;
(* USED FROM (procedural_shape_model_schema); *)
TYPE shape_representation_item = SELECT
  (geometric_representation_item,
   topological_representation_item);
END_TYPE;
(* USED FROM (geometric_model_schema); *)
(* This SELECT set has been pruned. *)
TYPE csg_primitive = SELECT (
   block,
   bounded_primitive_2d,
   right_angular_wedge,
   right_circular_cone,
   right_circular_cylinder,
   sphere,
   torus);
END_TYPE;

(* USED FROM (solid_shape_element_schema); *)
TYPE base_solid_select = SELECT
  (solid_model,
   csg_primitive,
   boolean_result);
WHERE
   WR1: NOT('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.PRIMITIVE_2D' IN TYPEOF(SELF));
END_TYPE;
(* USED FROM (solid_shape_element_schema); *)
TYPE blend_radius_variation_type = ENUMERATION OF 
  (linear_blend,  
   cubic_blend, 
   unspecified_blend);
END_TYPE;
(* USED FROM (solid_shape_element_schema); *)
TYPE blend_end_condition_select = SELECT 
  (point_on_curve,  
   edge_curve, 
   vertex);
END_TYPE;
(* USED FROM (presentation_appearance_schema); *)
  TYPE box_height = positive_ratio_measure;
  END_TYPE;
(* USED FROM (presentation_appearance_schema); *)
  TYPE box_width = positive_ratio_measure;
  END_TYPE;
(* USED FROM (presentation_appearance_schema); *)
  TYPE  box_slant_angle = plane_angle_measure;
  END_TYPE;
(* USED FROM (presentation_appearance_schema); *)
  TYPE box_rotate_angle = plane_angle_measure;
  END_TYPE;
(* USED FROM (presentation_resource_schema); *)
TYPE font_select = SELECT
  (pre_defined_text_font,
   externally_defined_text_font,
   text_font);
END_TYPE;
(* USED FROM (presentation_organization_schema); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE annotation_representation_select = SELECT (
   draughting_model,
   presentation_area,
   presentation_view,
   symbol_representation);
END_TYPE;

(* USED FROM (sketch_schema); *)
TYPE surface_or_solid_model = SELECT
  (surface_model,
   solid_model);
END_TYPE;

(* Implicit interfaced from: mathematical_description_of_distribution_schema *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE property_distribution_select = SELECT (
   action_property,
   general_property_relationship,
   model_property_distribution,
   property_definition,
   resource_property);
END_TYPE;

(* USED FROM (sketch_schema); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE sketch_element_select = SELECT (
   curve,
   point);
   WHERE
  WR1: 'AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.GEOMETRIC_REPRESENTATION_ITEM' IN TYPEOF(SELF);
END_TYPE;
(* USED FROM (sketch_schema); *)
TYPE sketch_basis_select = SELECT
  (planar_curve_select,
   curve_bounded_surface,
   face_surface);
END_TYPE;
(* USED FROM (sketch_schema); *)
TYPE sketch_type_select = SELECT
  (neutral_sketch_representation,
   positioned_sketch,
   subsketch);
END_TYPE;
(* USED FROM (sketch_schema); *)
TYPE curves_or_area = ENUMERATION OF
  (curves, area);
END_TYPE;

(* Pruned unused type: terminator  *)

(* USED FROM (presentation_appearance_schema); *)
  TYPE marker_select = SELECT
    (marker_type,
     pre_defined_marker);
  END_TYPE;
(* USED FROM (presentation_appearance_schema); *)
  TYPE marker_type = ENUMERATION OF
    (dot,
     x,
     plus,
     asterisk,
     ring,
     square,
     triangle);
  END_TYPE;
(* USED FROM (geometric_model_schema); *)
TYPE edge_or_curve = SELECT
   (curve, 
    edge);
END_TYPE; 
(* USED FROM (geometric_model_schema); *)
TYPE face_or_surface = SELECT
   (face, 
    surface);
END_TYPE; 
(* USED FROM (geometric_model_schema); *)
TYPE path_or_composite_curve = SELECT
   (composite_curve, 
    path);
END_TYPE; 
(* USED FROM (geometric_model_schema); *)
TYPE tessellated_edge_or_vertex = SELECT
   (tessellated_edge, 
    tessellated_vertex);
END_TYPE; 

(* Pruned unused type: c_document_reference_item  *)


(* Pruned unused type: external_identification_for_plib_property  *)

(* USED FROM (support_resource_schema); *)
  TYPE label = STRING;
  END_TYPE;
(* USED FROM (support_resource_schema); *)
  TYPE text = STRING;
  END_TYPE;
(* USED FROM (process_property_schema); *)
TYPE characterized_action_definition = SELECT
   (action,
   action_method,
   action_method_relationship,
   action_relationship);
END_TYPE;
(* USED FROM (product_property_definition_schema); *)
  TYPE derived_property_select = SELECT (property_definition, action_property, resource_property);
  END_TYPE;
(* USED FROM (process_property_schema); *)
(* This SELECT set has been pruned. *)
TYPE characterized_resource_definition = SELECT (
   action_resource,
   action_resource_requirement);
END_TYPE;


(* Pruned unused type: state_type_of_item  *)

(* USED FROM (Tagged_text_representation_mim); *)
TYPE string_representation_item_select = SELECT(
    descriptive_representation_item,
    included_text_block,
    structured_text_composition);
END_TYPE; 

(* Pruned unused type: event_occurrence_date_and_time_item  *)


(* Pruned unused type: event_occurrence_date_item  *)


(* Pruned unused type: id_for_product_identification  *)


(* Pruned unused type: spr_document_reference_item  *)


(* Pruned unused type: spr_organization_item  *)


(* Pruned unused type: spr_person_and_organization_item  *)


(* Implicit interfaced from: presentation_appearance_schema *)
(* This SELECT set has been pruned. *)
TYPE presentation_style_select = SELECT (
   point_style,
   curve_style,
   surface_style_usage,
   symbol_style,
   fill_area_style,
   text_style,
   externally_defined_style,
   null_style);
END_TYPE;


(* Pruned unused type: representing_relationship  *)

(* USED FROM (kinematic_motion_representation_schema); *)
TYPE link_or_shape_representation = SELECT(
  kinematic_link_representation,
  shape_representation);
END_TYPE;
(* USED FROM (kinematic_motion_representation_schema); *)
TYPE interpolation_type = ENUMERATION OF
  (undefined_interpolation_type,
   discontinuous_interpolation_type,
   synchronous_interpolation_type,
   linear_interpolation_type);
END_TYPE;

(* Pruned unused type: organization_item_solution  *)

(* USED FROM (Product_breakdown_mim); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE product_definition_or_breakdown_element_usage = SELECT (
   product_definition,
   product_definition_usage);
END_TYPE;

(* USED FROM (Product_breakdown_mim); *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE product_definition_or_product_definition_relationship = SELECT (
   product_definition,
   product_definition_usage);
END_TYPE;


(* Pruned unused type: requirement_identification_and_version_identification_item  *)

(* USED FROM (Specification_based_configuration_mim); *)
TYPE configured_effectivity_context_item = SELECT (product_concept_feature_association);
END_TYPE;
(* USED FROM (Specification_based_configuration_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE configured_effectivity_item = SELECT (
   action_relationship,
   process_plan,
   product_definition,
   product_process_plan);
END_TYPE;

(* USED FROM (Product_class_mim); *)
TYPE category_usage_item = SELECT (product_class);
END_TYPE;

(* Pruned unused type: id_for_class  *)


(* Pruned unused type: specification_for_category  *)

(* USED FROM (geometric_model_schema); *)
TYPE boolean_operand = SELECT
   (boolean_result, 
    csg_primitive, 
    half_space_2d, 
    half_space_solid, 
    solid_model);
END_TYPE; 
(* USED FROM (geometric_model_schema); *)
TYPE boolean_operator = ENUMERATION OF 
   (union,
    intersection,
    difference);
END_TYPE; 
(* USED FROM (geometric_model_schema); *)
TYPE csg_select = SELECT
   (boolean_result, 
    csg_primitive);
END_TYPE; 

(* Pruned unused type: external_class_name_item  *)

(* USED FROM (Name_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE name_item = SELECT (
   assembly_component_usage,
   external_class_library,
   group,
   group_relationship,
   product,
   product_definition);
END_TYPE;


(* Pruned unused type: mri_aliasable_item  *)


(* Pruned unused type: mri_approval_item  *)


(* Pruned unused type: mri_attribute_language_item  *)


(* Pruned unused type: mri_date_and_time_item  *)


(* Pruned unused type: mri_date_item  *)


(* Pruned unused type: mri_identification_item  *)


(* Pruned unused type: mri_multi_language_attribute_item  *)


(* Pruned unused type: mri_organization_item  *)


(* Pruned unused type: mri_person_and_organization_item  *)

(* USED FROM (Work_request_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE action_request_item = SELECT (
   action,
   action_method,
   action_property,
   action_relationship,
   alternate_product_relationship,
   assembly_component_usage_substitute,
   configuration_design,
   configuration_effectivity,
   configuration_item,
   configured_effectivity_assignment,
   document_file,
   draughting_model,
   drawing_revision,
   general_property,
   material_designation,
   mechanical_design_geometric_presentation_representation,
   organizational_project,
   presentation_area,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   resource_property,
   shape_aspect,
   shape_representation,
   versioned_action_request);
END_TYPE;


(* Pruned unused type: dm_aliasable_item  *)


(* Pruned unused type: dm_approval_item  *)


(* Pruned unused type: dm_attribute_language_item  *)


(* Pruned unused type: dm_contract_item  *)


(* Pruned unused type: dm_date_and_time_item  *)


(* Pruned unused type: dm_date_item  *)


(* Pruned unused type: dm_identification_item  *)


(* Pruned unused type: dm_multi_language_attribute_item  *)


(* Pruned unused type: dm_organization_item  *)


(* Pruned unused type: dm_person_and_organization_item  *)


(* Pruned unused type: dm_security_classification_item  *)


(* Pruned unused type: idrm_marked_item  *)

(* USED FROM (Time_interval_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE time_interval_item = SELECT (
   action,
   action_directive,
   action_method,
   action_property,
   action_relationship,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   applied_person_and_organization_assignment,
   approval_status,
   assembly_component_usage_substitute,
   certification,
   class,
   class_system,
   configuration_design,
   configuration_effectivity,
   configuration_item,
   configured_effectivity_assignment,
   contract,
   document_file,
   draughting_model,
   drawing_revision,
   executed_action,
   general_property,
   material_designation,
   mechanical_design_geometric_presentation_representation,
   organization_relationship,
   organizational_project,
   person_and_organization,
   presentation_area,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   requirement_for_action_resource,
   resource_property,
   security_classification,
   security_classification_level,
   shape_representation,
   time_interval_based_effectivity,
   versioned_action_request);
END_TYPE;

(* USED FROM (geometry_schema); *)
TYPE axis2_placement = SELECT
   (axis2_placement_2d, 
    axis2_placement_3d);
END_TYPE; 
(* USED FROM (presentation_appearance_schema); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE invisibility_context = SELECT (
   draughting_model,
   presentation_representation,
   presentation_set);
END_TYPE;

(* USED FROM (presentation_appearance_schema); *)
  TYPE null_style = ENUMERATION OF
    (null);
  END_TYPE;
(* USED FROM (presentation_definition_schema); *)
  TYPE text_alignment = label;
  END_TYPE;

(* Pruned unused type: ers_description_attribute_select  *)

(* USED FROM (external_reference_schema); *)
  TYPE message = STRING;
  END_TYPE;
(* USED FROM (external_reference_schema); *)
  TYPE source_item = SELECT (identifier, message);
  END_TYPE;
(* USED FROM (presentation_appearance_schema); *)
  TYPE surface_side = ENUMERATION OF
    (positive,
     negative,
     both);
  END_TYPE;
(* USED FROM (presentation_appearance_schema); *)
  TYPE u_direction_count = INTEGER;
    WHERE
      WR1: SELF > 1;
  END_TYPE;
(* USED FROM (presentation_appearance_schema); *)
  TYPE v_direction_count = INTEGER;
    WHERE
      WR1: SELF > 1;
  END_TYPE;
(* USED FROM (aic_mechanical_design_shaded_presentation); *)
  TYPE mechanical_design_shaded_presentation_area_items = SELECT(
    axis2_placement,
    mapped_item);
  END_TYPE;
(* USED FROM (aic_mechanical_design_shaded_presentation); *)
  TYPE mechanical_design_shaded_presentation_representation_items = SELECT(
    axis2_placement,
    camera_model_d3,
    mapped_item,
    styled_item);
  END_TYPE;

(* Pruned unused type: pamivc_document_reference_item  *)

(* USED FROM (date_time_schema); *)
TYPE day_in_month_number = INTEGER;
WHERE
  WR1: {1 <= SELF <= 31};
END_TYPE; 
(* USED FROM (kinematic_structure_schema); *)
TYPE rigid_placement = SELECT
  (axis2_placement_3d,
   su_parameters);
END_TYPE;
(* USED FROM (kinematic_structure_schema); *)
TYPE kinematic_link_representation_items = SELECT (
  curve,
  point,
  rigid_placement,
  surface);
END_TYPE;
(* USED FROM (kinematic_structure_schema); *)
TYPE actuated_direction = ENUMERATION OF (
	bidirectional,
	positive_only,
	negative_only,
	not_actuated);
END_TYPE;
(* USED FROM (kinematic_state_schema); *)
TYPE spatial_rotation = SELECT
  (ypr_rotation,
   rotation_about_direction);
END_TYPE;

(* Implicit interfaced from: presentation_definition_schema *)
  TYPE defined_glyph_select = SELECT
    (pre_defined_character_glyph,
     externally_defined_character_glyph);
  END_TYPE;
(* USED FROM (kinematic_state_schema); *)
TYPE ypr_enumeration = ENUMERATION OF
  (yaw,
   pitch,
   roll);
END_TYPE;
(* USED FROM (kinematic_state_schema); *)
TYPE spherical_pair_select = SELECT (
  spherical_pair,
  spherical_pair_with_pin);
END_TYPE;  

(* Pruned unused type: aliasable_item  *)

(* USED FROM (Certification_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE certification_item = SELECT (
   alternate_product_relationship,
   make_from_usage_option,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship);
END_TYPE;

(* USED FROM (Multi_linguism_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE attribute_language_item = SELECT (
   action,
   actuated_kinematic_pair,
   alternate_product_relationship,
   application_context,
   applied_certification_assignment,
   applied_document_reference,
   applied_document_usage_constraint_assignment,
   applied_external_identification_assignment,
   applied_identification_assignment,
   applied_organizational_project_assignment,
   applied_security_classification_assignment,
   approval,
   approval_relationship,
   approval_status,
   assembly_component_usage_substitute,
   attribute_value_assignment,
   certification,
   certification_type,
   configuration_design,
   configuration_item,
   contract,
   data_environment,
   date_role,
   date_time_role,
   descriptive_representation_item,
   document_relationship,
   document_usage_role,
   draughting_title,
   effectivity,
   effectivity_relationship,
   event_occurrence,
   external_source,
   general_property,
   general_property_relationship,
   geometric_representation_item,
   geometric_tolerance,
   group,
   group_relationship,
   identification_role,
   information_right,
   information_usage_right,
   kinematic_pair,
   make_from_usage_option,
   mapped_item,
   multi_language_attribute_assignment,
   name_assignment,
   object_role,
   organization_relationship,
   organization_role,
   organizational_project,
   organizational_project_relationship,
   organizational_project_role,
   person_and_organization,
   person_and_organization_role,
   presentation_layer_assignment,
   process_product_association,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_relationship,
   product_definition,
   product_definition_context,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_shape,
   product_definition_substitute,
   product_related_product_category,
   property_definition,
   property_definition_relationship,
   representation,
   representation_relationship,
   requirement_for_action_resource,
   resource_property,
   resource_requirement_type,
   security_classification,
   security_classification_assignment,
   shape_aspect,
   shape_aspect_relationship,
   shape_representation,
   styled_item,
   time_interval_role,
   topological_representation_item,
   uncertainty_measure_with_unit,
   uncertainty_qualifier,
   usage_association,
   versioned_action_request,
   versioned_action_request_relationship);
END_TYPE;

(* USED FROM (Multi_linguism_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE multi_language_attribute_item = SELECT (
   action,
   action_directive,
   action_method,
   action_property,
   action_relationship,
   actuated_kinematic_pair,
   alternate_product_relationship,
   application_context,
   applied_certification_assignment,
   applied_document_reference,
   applied_document_usage_constraint_assignment,
   applied_external_identification_assignment,
   applied_identification_assignment,
   applied_organizational_project_assignment,
   approval,
   approval_relationship,
   approval_status,
   assembly_component_usage_substitute,
   attribute_value_assignment,
   certification,
   certification_type,
   colour,
   configuration_design,
   configuration_item,
   contract,
   data_environment,
   date_role,
   date_time_role,
   descriptive_representation_item,
   document_relationship,
   document_usage_role,
   draughting_title,
   effectivity,
   effectivity_relationship,
   event_occurrence,
   external_source,
   general_property,
   general_property_relationship,
   geometric_representation_item,
   geometric_tolerance,
   group,
   group_relationship,
   identification_role,
   information_right,
   information_usage_right,
   kinematic_pair,
   make_from_usage_option,
   mapped_item,
   name_assignment,
   object_role,
   organization_relationship,
   organization_role,
   organizational_project,
   organizational_project_relationship,
   organizational_project_role,
   person_and_organization,
   person_and_organization_role,
   presentation_layer_assignment,
   process_product_association,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_relationship,
   product_definition,
   product_definition_context,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_shape,
   product_definition_substitute,
   product_related_product_category,
   property_definition,
   property_definition_relationship,
   representation,
   representation_relationship,
   requirement_for_action_resource,
   resource_property,
   resource_requirement_type,
   security_classification,
   security_classification_assignment,
   shape_aspect,
   shape_aspect_relationship,
   shape_representation,
   styled_item,
   time_interval_role,
   topological_representation_item,
   uncertainty_measure_with_unit,
   uncertainty_qualifier,
   usage_association,
   versioned_action_request,
   versioned_action_request_relationship);
END_TYPE;


(* Pruned unused type: project_as_date_and_time_item  *)


(* Pruned unused type: project_as_date_item  *)


(* Pruned unused type: project_event_occurrence_item  *)

(* USED FROM (Project_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE project_item = SELECT (
   assembly_component_usage,
   configuration_item,
   executed_action,
   product,
   product_concept,
   product_definition,
   product_definition_formation);
END_TYPE;

(* USED FROM (kinematic_topology_schema); *)
TYPE kinematic_topology_representation_select = SELECT (
  kinematic_topology_structure,
  kinematic_topology_directed_structure,
  kinematic_topology_network_structure
);
END_TYPE;
(* USED FROM (Event_assignment_mim); *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE event_occurrence_item = SELECT (
   action,
   action_directive,
   action_method,
   action_property,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   assembly_component_usage_substitute,
   certification,
   class,
   class_system,
   configuration_design,
   configuration_effectivity,
   configuration_item,
   configured_effectivity_assignment,
   contract,
   draughting_model,
   drawing_revision,
   executed_action,
   general_property,
   material_designation,
   mechanical_design_geometric_presentation_representation,
   organization_relationship,
   organizational_project,
   person_and_organization,
   presentation_area,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   requirement_for_action_resource,
   resource_property,
   security_classification_level,
   shape_representation);
END_TYPE;


(* Implicit interfaced from: geometry_schema *)
TYPE dimension_count = INTEGER;
WHERE
  WR1: SELF > 0;
END_TYPE; 

(* Implicit interfaced from: product_property_definition_schema *)
  TYPE characterized_definition = SELECT (
    characterized_object, 
    characterized_product_definition, 
    shape_definition);
  END_TYPE;

(* Chained implicit interfaced from: date_time_schema *)
TYPE year_number = INTEGER;
END_TYPE; 

(* Implicit interfaced from: presentation_appearance_schema *)
  TYPE box_characteristic_select = SELECT
    (box_height,
     box_width,
     box_slant_angle,
     box_rotate_angle);
  END_TYPE;

(* Chained implicit interfaced from: person_organization_schema *)
  TYPE person_organization_select = SELECT (
    person, 
    organization, 
    person_and_organization);
  END_TYPE;

(* Implicit interfaced from: date_time_schema *)
TYPE month_in_year_number = INTEGER;
WHERE
  WR1: { 1 <= SELF <= 12 };
END_TYPE; 

(* Implicit interfaced from: date_time_schema *)
TYPE ahead_or_behind = ENUMERATION OF 
   (ahead,
    exact,
    behind);
END_TYPE; 

(* Implicit interfaced from: date_time_schema *)
TYPE hour_in_day = INTEGER;
WHERE
  WR1: { 0 <= SELF < 24 };
END_TYPE; 

(* Implicit interfaced from: date_time_schema *)
TYPE minute_in_hour = INTEGER;
WHERE
  WR1: { 0 <= SELF <= 59 };
END_TYPE; 

(* Implicit interfaced from: date_time_schema *)
TYPE second_in_minute = REAL;
WHERE
  WR1: { 0 <= SELF <= 60.0 };
END_TYPE; 

(* Implicit interfaced from: geometry_schema *)
TYPE vector_or_direction = SELECT
   (direction, 
    vector);
END_TYPE; 

(* Implicit interfaced from: mathematical_context_schema *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE space_context_select = SELECT (
   action,
   action_method,
   general_property,
   product_definition,
   representation_item,
   shape_aspect);
END_TYPE;


(* Implicit interfaced from: product_property_definition_schema *)
  TYPE internal_or_reflected_shape_aspect = SELECT (
    shape_aspect,
    identifier);
  END_TYPE;

(* Chained implicit interfaced from: product_definition_schema *)
  TYPE product_definition_or_reference = SELECT (
    product_definition, 
    generic_product_definition_reference);
  END_TYPE;

(* Chained implicit interfaced from: date_time_schema *)
TYPE date_time_or_event_occurrence = SELECT
   (date_time_select, 
    event_occurrence);
END_TYPE; 

(* Implicit interfaced from: geometry_schema *)
TYPE trimming_select = SELECT
   (cartesian_point, 
    parameter_value);
END_TYPE; 

(* Implicit interfaced from: geometry_schema *)
TYPE trimming_preference = ENUMERATION OF 
   (cartesian,
    parameter,
    unspecified);
END_TYPE; 

(* Implicit interfaced from: geometry_schema *)
TYPE transition_code = ENUMERATION OF 
   (discontinuous,
    continuous,
    cont_same_gradient,
    cont_same_gradient_same_curvature);
END_TYPE; 

(* Implicit interfaced from: geometry_schema *)
TYPE pcurve_or_surface = SELECT
   (pcurve, 
    surface);
END_TYPE; 

(* Implicit interfaced from: geometry_schema *)
TYPE preferred_surface_curve_representation = ENUMERATION OF 
   (curve_3d,
    pcurve_s1,
    pcurve_s2);
END_TYPE; 

(* Implicit interfaced from: geometry_schema *)
TYPE curve_on_surface = SELECT
   (composite_curve_on_surface, 
    pcurve, 
    surface_curve);
END_TYPE; 

(* Implicit interfaced from: geometry_schema *)
TYPE b_spline_curve_form = ENUMERATION OF 
   (polyline_form,
    circular_arc,
    elliptic_arc,
    parabolic_arc,
    hyperbolic_arc,
    unspecified);
END_TYPE; 

(* Implicit interfaced from: geometry_schema *)
TYPE b_spline_surface_form = ENUMERATION OF 
   (plane_surf,
    cylindrical_surf,
    conical_surf,
    spherical_surf,
    toroidal_surf,
    surf_of_revolution,
    ruled_surf,
    generalised_cone,
    quadric_surf,
    surf_of_linear_extrusion,
    unspecified);
END_TYPE; 

(* Implicit interfaced from: qualified_measure_schema *)
TYPE value_qualifier = SELECT
  (precision_qualifier,
   type_qualifier,
   uncertainty_qualifier,
   value_format_type_qualifier);
END_TYPE;

(* Implicit interfaced from: qualified_measure_schema *)
TYPE value_format_type = identifier;
WHERE
      WR1: LENGTH(SELF) <= 80; 
END_TYPE; -- value_format_type

(* Implicit interfaced from: presentation_appearance_schema *)
(* This SELECT set has been been expanded or truncated for EXPRESS E1 layout. *)
TYPE invisible_item = SELECT (
   draughting_callout,
   presentation_layer_assignment,
   representation,
   styled_item);
END_TYPE;


(* Implicit interfaced from: shape_aspect_definition_schema *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE shape_representation_with_parameters_items = SELECT (
   descriptive_representation_item,
   direction,
   measure_representation_item,
   placement);
END_TYPE;


(* Implicit interfaced from: presentation_appearance_schema *)
  TYPE styled_item_target = SELECT
    (geometric_representation_item,
     mapped_item,
     representation);
  END_TYPE;

(* Implicit interfaced from: document_schema *)
  TYPE product_or_formation_or_definition = SELECT (product, product_definition_formation, product_definition);
  END_TYPE;

(* Implicit interfaced from: action_schema *)
  TYPE supported_item = SELECT (action_directive, action, action_method);
  END_TYPE;

(* Implicit interfaced from: process_property_schema *)
TYPE property_or_shape_select = SELECT
     (property_definition,
      shape_definition);
END_TYPE;

(* Implicit interfaced from: configuration_management_schema *)
TYPE configuration_design_item = SELECT
   (product_definition,
    product_definition_formation);
END_TYPE;

(* Implicit interfaced from: material_property_definition_schema *)
(* This SELECT set has been pruned. *)
TYPE characterized_product_composition_value = SELECT (
   measure_with_unit);
END_TYPE;


(* Implicit interfaced from: product_definition_schema *)
  TYPE source = ENUMERATION OF (made, bought, not_known);
  END_TYPE;

(* Implicit interfaced from: draughting_element_schema *)
  TYPE dimension_extent_usage = ENUMERATION OF
    (origin,
     target);
  END_TYPE;

(* Implicit interfaced from: presentation_definition_schema *)
  TYPE annotation_symbol_occurrence_item = SELECT (
    annotation_symbol,
    defined_symbol); 
  END_TYPE;

(* Implicit interfaced from: shape_aspect_definition_schema *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE datum_reference_modifier_type = ENUMERATION OF (
   circular_or_cylindrical,
   distance,
   projected,
   spherical);
END_TYPE;


(* Implicit interfaced from: shape_aspect_definition_schema *)
TYPE datum_or_common_datum = SELECT
   (common_datum_list, 
    datum);
END_TYPE; 

(* Implicit interfaced from: shape_aspect_definition_schema *)
(* This EXTENSIBLE SELECT have been replaced with plain SELECT for EXPRESS E1 layout. *)
TYPE datum_reference_modifier = SELECT (
   datum_reference_modifier_with_value,
   simple_datum_reference_modifier);
END_TYPE;


(* Implicit interfaced from: shape_aspect_definition_schema *)
TYPE limit_condition = ENUMERATION OF 
   (maximum_material_condition,
    least_material_condition,
    regardless_of_feature_size);
END_TYPE; 

(* Implicit interfaced from: shape_tolerance_schema *)
TYPE geometric_tolerance_target = SELECT
   (dimensional_location, 
    dimensional_size, 
    product_definition_shape, 
    shape_aspect);
END_TYPE; 

(* Implicit interfaced from: shape_tolerance_schema *)
TYPE datum_system_or_reference = SELECT
   (datum_reference, 
    datum_system);
END_TYPE; 

(* Implicit interfaced from: shape_tolerance_schema *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE area_unit_type = ENUMERATION OF (
   circular,
   rectangular,
   square);
END_TYPE;


(* Implicit interfaced from: shape_tolerance_schema *)
(* This EXTENSIBLE ENUMERATION set has been replaced with plain ENUMERATION for EXPRESS E1 layout. *)
TYPE geometric_tolerance_modifier = ENUMERATION OF (
   any_cross_section,
   common_zone,
   each_radial_element,
   free_state,
   least_material_requirement,
   line_element,
   major_diameter,
   maximum_material_requirement,
   minor_diameter,
   not_convex,
   pitch_diameter,
   reciprocity_requirement,
   separate_requirement,
   statistical_tolerance,
   tangent_plane);
END_TYPE;


(* Implicit interfaced from: shape_tolerance_schema *)
TYPE tolerance_zone_target = SELECT (
  dimensional_location,
  dimensional_size,
  geometric_tolerance,
  general_datum_reference);
END_TYPE;

(* Implicit interfaced from: presentation_organization_schema *)
  TYPE camera_model_d3_multi_clipping_interection_select = SELECT ( 
    camera_model_d3_multi_clipping_union, 
    plane); 
  END_TYPE; 

(* Implicit interfaced from: presentation_organization_schema *)
  TYPE camera_model_d3_multi_clipping_union_select = SELECT ( 
    camera_model_d3_multi_clipping_intersection, 
    plane); 
  END_TYPE; 

(* Implicit interfaced from: presentation_organization_schema *)
  TYPE central_or_parallel = ENUMERATION OF 
    (central, 
     parallel);
  END_TYPE;

(* Implicit interfaced from: presentation_organization_schema *)
  TYPE presentation_size_assignment_select = SELECT 
    (presentation_view,
     presentation_area,
     area_in_set);
  END_TYPE;

(* Implicit interfaced from: solid_shape_element_schema *)
TYPE generalized_surface_select = SELECT 
  (surface, 
   face_surface, 
   surfaced_open_shell);
END_TYPE;

(* Implicit interfaced from: material_property_definition_schema *)
TYPE characterized_material_property = SELECT
  (material_property_representation,
   product_material_composition_relationship);
END_TYPE;

(* Implicit interfaced from: presentation_appearance_schema *)
  TYPE character_style_select = SELECT
    (character_glyph_style_stroke,
     character_glyph_style_outline,
     text_style_for_defined_font);
  END_TYPE;

(* Implicit interfaced from: presentation_appearance_schema *)
(* This SELECT set has been pruned. *)
TYPE character_spacing_select = SELECT (
   length_measure,
   ratio_measure,
   measure_with_unit,
   descriptive_measure);
END_TYPE;


(* Implicit interfaced from: presentation_definition_schema *)
  TYPE text_delineation = label;
  END_TYPE;

(* Implicit interfaced from: geometric_model_schema *)
TYPE surface_model = SELECT
   (face_based_surface_model, 
    shell_based_surface_model);
END_TYPE; 

(* Pruned unused type: wireframe_model  *)


(* Implicit interfaced from: presentation_definition_schema *)
  TYPE text_path = ENUMERATION OF
    (left,
     right,
     up,
     down);
  END_TYPE;

(* Implicit interfaced from: presentation_definition_schema *)
  TYPE annotation_text_occurrence_item = SELECT(
    text_literal, 
    annotation_text, 
    annotation_text_character, 
    defined_character_glyph, 
    composite_text); 
  END_TYPE; 

(* Implicit interfaced from: presentation_definition_schema *)
  TYPE curve_or_curve_set = SELECT (
    curve,
    geometric_curve_set); 
  END_TYPE;

(* Implicit interfaced from: presentation_definition_schema *)
  TYPE text_string_representation_item = SELECT(
    text_literal, 
    annotation_text, 
    annotation_text_character, 
    defined_character_glyph, 
    composite_text, 
    axis2_placement); 
  END_TYPE; 

(* Implicit interfaced from: presentation_appearance_schema *)
  TYPE curve_font_or_scaled_curve_font_select = SELECT
    (curve_style_font_select,
     curve_style_font_and_scaling);
  END_TYPE;

(* Implicit interfaced from: presentation_appearance_schema *)
(* This SELECT set has been pruned. *)
TYPE size_select = SELECT (
   positive_length_measure,
   measure_with_unit,
   descriptive_measure);
END_TYPE;


(* Implicit interfaced from: date_time_schema *)
TYPE day_in_week_number = INTEGER;
WHERE
  WR1: { 1 <= SELF <= 7 };
END_TYPE; 

(* Implicit interfaced from: draughting_element_schema *)
  TYPE annotation_plane_element = SELECT 
    (draughting_callout, 
     styled_item); 
  END_TYPE;

(* Implicit interfaced from: draughting_element_schema *)
  TYPE plane_or_planar_box = SELECT 
    (plane, 
     planar_box) ;
  END_TYPE; 

(* Implicit interfaced from: draughting_element_schema *)
  TYPE draughting_callout_element = SELECT
    (annotation_curve_occurrence,
     annotation_fill_area_occurrence,
     annotation_symbol_occurrence,
     annotation_text_occurrence,
     tessellated_annotation_occurrence);
  END_TYPE;

(* Implicit interfaced from: product_property_definition_schema *)
  TYPE multi_or_next_assembly_usage_occurrence = SELECT (
    multi_level_reference_designator,
    next_assembly_usage_occurrence);
  END_TYPE;

(* Implicit interfaced from: presentation_appearance_schema *)
  TYPE shading_curve_method = ENUMERATION OF
    (constant_colour,
     linear_colour);
  END_TYPE;

(* Implicit interfaced from: topology_schema *)
 TYPE reversible_topology = SELECT
           (reversible_topology_item,
            list_of_reversible_topology_item,
            set_of_reversible_topology_item);
 END_TYPE;

(* Implicit interfaced from: topology_schema *)
 TYPE list_of_reversible_topology_item =
                               LIST [0:?] of reversible_topology_item;
 END_TYPE;

(* Implicit interfaced from: topology_schema *)
 TYPE reversible_topology_item = SELECT
   (edge, 
    path, 
    face, 
    face_bound,
    closed_shell, 
    open_shell);
 END_TYPE;

(* Implicit interfaced from: topology_schema *)
  TYPE set_of_reversible_topology_item =
                       SET [0:?] of reversible_topology_item;
  END_TYPE;

(* Implicit interfaced from: topology_schema *)
 TYPE shell = SELECT
   (vertex_shell,
    wire_shell,
    open_shell,
    closed_shell);
 END_TYPE;

(* Implicit interfaced from: presentation_organization_schema *)
  TYPE layered_item = SELECT 
    (presentation_representation,
     representation_item);
  END_TYPE;

(* Pruned unused type: gs_id_attribute_select  *)


(* Implicit interfaced from: geometry_schema *)
TYPE knot_type = ENUMERATION OF 
   (uniform_knots,
    quasi_uniform_knots,
    piecewise_bezier_knots,
    unspecified);
END_TYPE; 

(* Implicit interfaced from: presentation_appearance_schema *)
(* This SELECT set has been pruned. *)
TYPE fill_style_select = SELECT (
   fill_area_style_colour,
   externally_defined_tile_style,
   fill_area_style_tiles,
   externally_defined_hatch_style,
   fill_area_style_hatching);
END_TYPE;


(* Implicit interfaced from: presentation_appearance_schema *)
  TYPE fill_area_style_tile_shape_select = SELECT
    (fill_area_style_tile_curve_with_style,
     fill_area_style_tile_coloured_region,
     fill_area_style_tile_symbol_with_style,
     pre_defined_tile,
     externally_defined_tile);
  END_TYPE;

(* Implicit interfaced from: presentation_appearance_schema *)
(* This SELECT set has been pruned. *)
TYPE symbol_style_select = SELECT (
   symbol_colour);
END_TYPE;


(* Implicit interfaced from: presentation_definition_schema *)
  TYPE text_or_character = SELECT
    (annotation_text,
     annotation_text_character,
     defined_character_glyph,
     composite_text,
     text_literal);
  END_TYPE;

(* Implicit interfaced from: presentation_definition_schema *)
  TYPE defined_symbol_select = SELECT
    (pre_defined_symbol,
     externally_defined_symbol);
  END_TYPE;

(* Implicit interfaced from: presentation_organization_schema *)
  TYPE presentation_representation_select = SELECT 
    (presentation_representation,
     presentation_set);
  END_TYPE;

(* Implicit interfaced from: presentation_appearance_schema *)
  TYPE curve_or_annotation_curve_occurrence = SELECT
    (curve,
     annotation_curve_occurrence);
  END_TYPE;

(* Implicit interfaced from: presentation_appearance_schema *)
  TYPE surface_style_element_select = SELECT
    (surface_style_fill_area,
     surface_style_boundary,
     surface_style_silhouette,
     surface_style_segmentation_curve,
     surface_style_control_grid,
     surface_style_parameter_line,
     surface_style_rendering);
  END_TYPE;

(* Implicit interfaced from: presentation_appearance_schema *)
  TYPE curve_or_render = SELECT
    (curve_style,
     curve_style_rendering);
  END_TYPE;

(* Implicit interfaced from: presentation_appearance_schema *)
  TYPE shading_surface_method = ENUMERATION OF
    (constant_shading,
     colour_shading,
     dot_shading,
     normal_shading);
  END_TYPE;

(* Implicit interfaced from: presentation_appearance_schema *)
  TYPE direction_count_select = SELECT
    (u_direction_count,
     v_direction_count);
  END_TYPE;

(* Implicit interfaced from: presentation_appearance_schema *)
  TYPE surface_side_style_select = SELECT
    (surface_side_style,
     pre_defined_surface_side_style);
  END_TYPE;

(* Implicit interfaced from: presentation_organization_schema *)
  TYPE area_or_view = SELECT 
    (presentation_area,
     presentation_view);
  END_TYPE;

(* Implicit interfaced from: geometric_model_schema *)
TYPE geometric_set_select = SELECT
   (curve, 
    point, 
    surface);
END_TYPE; 

(* Implicit interfaced from: date_time_schema *)
TYPE day_in_year_number = INTEGER;
WHERE
  WR1: {1 <= SELF <= 366};
END_TYPE; 

(* Implicit interfaced from: date_time_schema *)
TYPE week_in_year_number = INTEGER;
WHERE
  WR1: { 1 <= SELF <= 53 };
END_TYPE; 

(* Pruned unused type: pos_id_attribute_select  *)


(* Implicit interfaced from: presentation_appearance_schema *)
  TYPE curve_style_font_select = SELECT
    (curve_style_font,
     pre_defined_curve_font,
     externally_defined_curve_font);
  END_TYPE;

(* Pruned unused type: pos_name_attribute_select  *)


(* Implicit interfaced from: presentation_appearance_schema *)
  TYPE rendering_properties_select = SELECT
    (surface_style_reflectance_ambient,
     surface_style_transparent);
  END_TYPE;

(* Implicit interfaced from: management_resources_schema *)
  TYPE attribute_type = SELECT (label, text);
  END_TYPE;

(* Pruned unused type: value_context_select  *)


(* Pruned unused type: ppds_id_attribute_select  *)


(* Pruned unused type: mrs_role_select  *)


(* Pruned unused type: pds_id_attribute_select  *)


(* Pruned unused type: pds_name_attribute_select  *)


(* Pruned unused type: acs_description_attribute_select  *)


(* Pruned unused type: acs_id_attribute_select  *)


(* Pruned unused type: apps_role_select  *)


(* Pruned unused type: apps_description_attribute_select  *)


(* Pruned unused type: dts_description_attribute_select  *)


(* Pruned unused type: cms_description_attribute_select  *)


(* Pruned unused type: cms_name_attribute_select  *)


(* Pruned unused type: pos_description_attribute_select  *)


(* Pruned unused type: surface_boundary  *)


(* Pruned unused type: as_id_attribute_select  *)


(* Pruned unused type: effs_description_attribute_select  *)


(* Pruned unused type: effs_name_attribute_select  *)


(* Pruned unused type: product_data_representation_view_item  *)


(* Pruned unused type: sts_item_identified_representation_usage_definition  *)


(* Pruned unused type: shape_tolerance_select  *)


(* Pruned unused type: st_id_attribute_select  *)


(* Pruned unused type: des_invisible_item  *)

(* USED FROM (parameterization_schema); *)
TYPE attribute_identifier = identifier;
WHERE
   WR1: validate_attribute_id(SELF);
END_TYPE;
(* USED FROM (sketch_schema); *)
TYPE planar_curve_select = SELECT
  (line,
   conic,
   trimmed_curve,
   pcurve,
   surface_curve);
WHERE
  WR1: SELF\geometric_representation_item.dim = 3;
  WR2: check_curve_planarity(SELF);
END_TYPE;
(* USED FROM (shape_aspect_definition_schema); *)
TYPE common_datum_list = LIST[2:?] OF datum_reference_element;
WHERE
  WR1: SIZEOF( QUERY(dre <* SELF | dre\shape_aspect.of_shape <> SELF[1]\shape_aspect.of_shape)) = 0;
END_TYPE; 
(* USED FROM (kinematic_state_schema); *)
TYPE ypr_rotation = ARRAY [ypr_index(yaw) : ypr_index(roll)]
                    OF plane_angle_measure;
END_TYPE;

(* Implicit interfaced from: presentation_definition_schema *)
  TYPE presentable_text = STRING;
    WHERE
      WR1: control_characters_free(SELF);
  END_TYPE;

(* Pruned unused type: express_identifier  *)


(* Pruned unused type: dotted_express_identifier  *)

(* USED FROM (shape_data_quality_criteria_schema); *)
  ENTITY entirely_narrow_face
    SUBTYPE OF(topology_related_to_nearly_degenerate_geometry);
      SELF\shape_data_quality_criterion.assessment_specification : shape_data_quality_assessment_by_logical_test;
      width_tolerance                                            : length_measure;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.FACE_SURFACE']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : validate_accuracy_types(SELF,
            ['AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.LENGTH_MEASURE']);
  END_ENTITY;
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  ENTITY cc_design_certification
    SUBTYPE OF (certification_assignment);
      items : SET[1:?] OF certified_item;
  END_ENTITY;
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  ENTITY cc_design_contract
    SUBTYPE OF (contract_assignment);
      items : SET[1:?] OF contracted_item;
  END_ENTITY;
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  ENTITY cc_design_date_and_time_assignment
    SUBTYPE OF (date_and_time_assignment);
      items : SET[1:?] OF date_time_item;
  END_ENTITY;
(* USED FROM (shape_data_quality_criteria_schema); *)
  ENTITY gap_between_adjacent_edges_in_loop
    SUBTYPE OF(geometric_gap_in_topology);
      SELF\shape_data_quality_criterion.assessment_specification : shape_data_quality_assessment_by_numerical_test;
    WHERE
      WR1 : ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.' +
            'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' 
            IN TYPEOF(SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold))
            AND ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.LENGTH_MEASURE'
            IN value_limit_type(SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold));
      WR2 : validate_measured_data_type(SELF,
            'AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.LENGTH_MEASURE');
      WR3 : validate_inspected_elements_type(SELF,
            ['AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.EDGE_LOOP']);
      WR4 : validate_locations_of_extreme_value_type(SELF,
            ['AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.ORIENTED_EDGE']);
      WR5 : validate_accuracy_types(SELF,
            ['AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.LENGTH_MEASURE']);
  END_ENTITY;
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  ENTITY cc_design_security_classification
    SUBTYPE OF (security_classification_assignment);
      items : SET[1:?] OF cc_classified_item; 
  END_ENTITY;
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  ENTITY cc_design_specification_reference
    SUBTYPE OF (document_reference);
      items : SET[1:?] OF cc_specified_item; 
  END_ENTITY;
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  ENTITY change
    SUBTYPE OF (action_assignment);
      items : SET[1:?] OF work_item;
  END_ENTITY;
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  ENTITY change_request
    SUBTYPE OF (action_request_assignment);
      items : SET[1:?] OF change_request_item;
  END_ENTITY;
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  ENTITY design_context
    SUBTYPE OF (product_definition_context);
    WHERE
      WR1: SELF.life_cycle_stage = 'design';
  END_ENTITY;
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  ENTITY design_make_from_relationship
    SUBTYPE OF (product_definition_relationship);
  END_ENTITY;
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  ENTITY mechanical_context
    SUBTYPE OF (product_context);
    WHERE
      WR1: SELF.discipline_type = 'mechanical';
  END_ENTITY;
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  ENTITY start_request
    SUBTYPE OF (action_request_assignment);
      items : SET[1:?] OF start_request_item;
  END_ENTITY;
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  ENTITY start_work
    SUBTYPE OF (action_assignment);
      items : SET[1:?] OF work_item;
  END_ENTITY;
(* USED FROM (Ap242_managed_model_based_3d_engineering_mim); *)
  ENTITY supplied_part_relationship
    SUBTYPE OF (product_definition_relationship);
  END_ENTITY;
(* USED FROM (Analysis_assignment_mim); *)
ENTITY analysis_assignment
  SUBTYPE OF (group);
END_ENTITY;
(* USED FROM (Analysis_assignment_mim); *)
ENTITY analysis_item
  SUBTYPE OF (group_assignment);
  items : SET[1:1] OF analysed_item;
  SELF\group_assignment.assigned_group : analysis_assignment;
END_ENTITY;
(* USED FROM (Analysis_assignment_mim); *)
ENTITY assigned_analysis
  SUBTYPE OF (group_assignment);
  items : SET[1:1] OF product_definition_formation;
  SELF\group_assignment.assigned_group : analysis_assignment;
END_ENTITY;
(* USED FROM (group_schema); *)
  ENTITY group  SUPERTYPE OF (ONEOF (
               CHANGE_GROUP,
               CHANGE_ELEMENT) ) ;
    name : label;
    description : OPTIONAL text;
  DERIVE
    id : identifier := get_id_value(SELF);
  WHERE
    WR1: SIZEOF(USEDIN(SELF, 'AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
  END_ENTITY;
(* USED FROM (management_resources_schema); *)
  ENTITY group_assignment
      ABSTRACT SUPERTYPE OF (ONEOF (
                        CURRENT_CHANGE_ELEMENT_ASSIGNMENT,
                        PREVIOUS_CHANGE_ELEMENT_ASSIGNMENT,
                        CHANGE_GROUP_ASSIGNMENT) ) ;
    assigned_group : group;
  DERIVE
    role : object_role := get_role(SELF);
  WHERE
    WR1: SIZEOF(USEDIN(SELF, 'AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.' + 'ROLE_ASSOCIATION.ITEM_WITH_ROLE')) <= 1;
  END_ENTITY;
(* USED FROM (Approval_mim); *)
ENTITY applied_approval_assignment
  SUBTYPE OF (approval_assignment);
  items : SET[1:?] OF approval_item;
END_ENTITY;
(* USED FROM (Classification_assignment_mim); *)
ENTITY applied_classification_assignment
  SUBTYPE OF (classification_assignment);
  items : SET[1:?] OF classification_item;
END_ENTITY;
(* USED FROM (Contract_mim); *)
ENTITY applied_contract_assignment
  SUBTYPE OF (contract_assignment);
  items : SET[1:?] OF contract_item;
END_ENTITY;
(* USED FROM (Date_time_assignment_mim); *)
ENTITY applied_date_and_time_assignment
  SUBTYPE OF (date_and_time_assignment);
  items : SET [1:?] OF date_and_time_item;
END_ENTITY;
(* USED FROM (Date_time_assignment_mim); *)
ENTITY applied_date_assignment
  SUBTYPE OF (date_assignment);
  items : SET [1:?] OF date_item;
END_ENTITY;
(* USED FROM (Person_organization_assignment_mim); *)
ENTITY applied_organization_assignment
  SUBTYPE OF (organization_assignment);
  items : SET[1:?] OF organization_item;
END_ENTITY;
(* USED FROM (Person_organization_assignment_mim); *)
ENTITY applied_person_and_organization_assignment
  SUBTYPE OF (person_and_organization_assignment);
  items : SET[1:?] OF person_and_organization_item;
END_ENTITY;
(* USED FROM (Security_classification_mim); *)
ENTITY applied_security_classification_assignment
  SUBTYPE OF (security_classification_assignment);
  items : SET [1:?] OF security_classification_item;
END_ENTITY;
(* USED FROM (Identification_assignment_mim); *)
ENTITY applied_identification_assignment
  SUBTYPE OF (identification_assignment);
  items : SET[1:?] OF identification_item;
END_ENTITY;
(* USED FROM (product_definition_schema); *)
  ENTITY product;
    id : identifier;
    name : label;
    description : OPTIONAL text;
    frame_of_reference : SET [1:?] OF product_context;
  END_ENTITY;
(* USED FROM (product_definition_schema); *)
  ENTITY product_category;
    name : label;
    description : OPTIONAL text;
  DERIVE
    id : identifier := get_id_value(SELF);
  WHERE
    WR1: SIZEOF(USEDIN(SELF, 'AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.' + 'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
  END_ENTITY;
(* USED FROM (product_definition_schema); *)
  ENTITY product_definition  SUPERTYPE OF (ONEOF (
               COMPOSITE_ASSEMBLY_SEQUENCE_DEFINITION,
               LAMINATE_TABLE,
               PLY_LAMINATE_SEQUENCE_DEFINITION) ) ;
    id : identifier;
    description : OPTIONAL text;
    formation : product_definition_formation;
    frame_of_reference : product_definition_context;
  DERIVE
    name : label := get_name_value(SELF);
  WHERE
    WR1: SIZEOF(USEDIN(SELF, 'AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.' + 'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
  END_ENTITY;
(* USED FROM (product_definition_schema); *)
  ENTITY product_definition_formation;
    id : identifier;
    description : OPTIONAL text;
    of_product : product;
  UNIQUE
    UR1: id, of_product;
  END_ENTITY;
(* USED FROM (product_definition_schema); *)
  ENTITY product_definition_formation_relationship;
    id : identifier;
    name : label;
    description : OPTIONAL text;
    relating_product_definition_formation : product_definition_formation;
    related_product_definition_formation : product_definition_formation;
  END_ENTITY;
(* USED FROM (product_definition_schema); *)
  ENTITY product_related_product_category
    SUBTYPE OF (product_category);
    products : SET [1:?] OF product;
  END_ENTITY;
(* USED FROM (analysis_schema); *)
ENTITY behavioural_decomposition_of_numerical_model;
  parts : SET [2 : ?] OF numerical_model;
  whole : numerical_model;
END_ENTITY;
(* USED FROM (analysis_schema); *)
ENTITY model_action_domain
SUBTYPE OF (numerical_model);
  initial : model_state_domain;
  final : model_state_domain;
END_ENTITY;
(* USED FROM (analysis_schema); *)
ENTITY model_product_domain
SUBTYPE OF (numerical_model);
  temporal_parts : LIST [0 : ?] OF model_action_domain;
END_ENTITY;
(* USED FROM (analysis_schema); *)
ENTITY model_product_domain_with_mesh
SUBTYPE OF (model_product_domain);
  model_mesh : mesh;
END_ENTITY;
(* USED FROM (analysis_schema); *)
ENTITY model_property_distribution;
  creating_software : text;
  domain : numerical_model;
  range : general_property;
END_ENTITY;
(* USED FROM (analysis_schema); *)
ENTITY model_state_domain
SUBTYPE OF (numerical_model);
END_ENTITY;
(* USED FROM (shape_data_quality_criteria_schema); *)
  ENTITY partly_overlapping_edges
    SUBTYPE OF(topology_related_to_overlapping_geometry);
      SELF\shape_data_quality_criterion.assessment_specification : shape_data_quality_assessment_by_numerical_test;
      interference_tolerance                                     : length_measure;
    WHERE
      WR1 : ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.' +
            'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT'
            IN TYPEOF(SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold))
            AND ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.LENGTH_MEASURE'
            IN value_limit_type(SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold));
      WR2 : validate_measured_data_type(SELF,
            'AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.LENGTH_MEASURE');
      WR3 : validate_inspected_elements_type(SELF,
            ['AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.EDGE_CURVE',
             'AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.EDGE_CURVE']);
      WR4 : validate_locations_of_extreme_value_type(SELF,
            ['AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.SUBEDGE','AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.SUBEDGE']);
      WR5 : validate_accuracy_types(SELF,
            ['AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.LENGTH_MEASURE']);
  END_ENTITY;
(* USED FROM (analysis_schema); *)
ENTITY simulation_run;
  id : identifier;
  name : label;
  description : text;
  simulated : numerical_model;
  results : SET [0 : ?] OF model_property_distribution;
END_ENTITY;
(* USED FROM (analysis_schema); *)
ENTITY spatial_decomposition_of_numerical_model;
  parts : SET [2 : ?] OF numerical_model;
  whole : numerical_model;
END_ENTITY;
(* USED FROM (analysis_schema); *)
ENTITY temporal_decomposition_of_model_action;
  parts : LIST [2 : ?] OF model_action_domain;
  whole : model_action_domain;
END_ENTITY;
(* USED FROM (analysis_product_relationships_schema); *)
ENTITY idealisation_relationship;
  id  : identifier;
  name : label;
  description : text;
  idealised : product_definition;
  idealisation : temporal_spatial_domain;
END_ENTITY;
(* USED FROM (analysis_product_relationships_schema); *)
ENTITY view_relationship;
  id : identifier;
  name :label;
  description : text;
  viewed : temporal_spatial_domain;
  view : numerical_model;
END_ENTITY;
(* USED FROM (systems_engineering_representation_schema); *)
ENTITY analysis_model
SUBTYPE OF (representation);
  SELF\representation.context_of_items : analysis_representation_context;
END_ENTITY;
(* USED FROM (systems_engineering_representation_schema); *)
ENTITY analysis_representation_context
SUBTYPE OF (representation_context);
END_ENTITY;
(* USED FROM (Shape_property_assignment_mim); *)
ENTITY geometric_item_specific_usage
  SUBTYPE OF(item_identified_representation_usage);
    SELF\item_identified_representation_usage.definition          : geometric_item_specific_usage_select;
    SELF\item_identified_representation_usage.used_representation : shape_model;
    SELF\item_identified_representation_usage.identified_item     : geometric_model_item;
  UNIQUE
   UR1 : definition;
END_ENTITY;
(* USED FROM (Shape_property_assignment_mim); *)
ENTITY chain_based_geometric_item_specific_usage
  SUBTYPE OF (geometric_item_specific_usage, 
    chain_based_item_identified_representation_usage);
END_ENTITY;
(* USED FROM (shape_data_quality_criteria_schema); *)
  ENTITY overcomplex_topology_and_geometry_relationship
     ABSTRACT SUPERTYPE OF (ONEOF (
                        UNUSED_PATCHES,
                        EDGE_WITH_EXCESSIVE_SEGMENTS,
                        FACE_SURFACE_WITH_EXCESSIVE_PATCHES_IN_ONE_DIRECTION))
  SUBTYPE OF(inapt_topology_and_geometry_relationship);
  END_ENTITY;
(* USED FROM (shape_data_quality_criteria_schema); *)
  ENTITY unused_patches
    SUBTYPE OF(overcomplex_topology_and_geometry_relationship);
      SELF\shape_data_quality_criterion.assessment_specification : shape_data_quality_assessment_by_numerical_test;
    WHERE
      WR1 : ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.' +
            'SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' 
            IN TYPEOF(SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold))
             AND ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.COUNT_MEASURE'
            IN value_limit_type(SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold));
      WR2 : validate_measured_data_type(SELF,
            'AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.COUNT_MEASURE');
      WR3 : validate_inspected_elements_type(SELF,
            ['AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.FACE_SURFACE']);
      WR4 : validate_locations_of_extreme_value_type(SELF,
            ['AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.'+
             'B_SPLINE_SURFACE_STRIP']);
      WR5 : validate_accuracy_types(SELF,
            []);
  END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY dependent_variable_definition
  SUBTYPE OF (unary_generic_expression);
  name        : label;
  description : text;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY bound_variable_semantics
  SUBTYPE OF (variable_semantics);
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY free_variable_semantics
  SUBTYPE OF (variable_semantics);
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY complex_number_literal
  SUBTYPE OF (generic_literal);
  real_part : REAL;
  imag_part : REAL;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY complex_number_literal_polar
  SUBTYPE OF (complex_number_literal);
  modulus  : REAL;  -- was radius
  argument : REAL; -- was angle 
DERIVE
  SELF\complex_number_literal.real_part : REAL := modulus * cos(argument);
  SELF\complex_number_literal.imag_part : REAL := modulus * sin(argument);
WHERE
  WR1: modulus  >= 0;
  WR2: {0 <= argument <= 2*PI};
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY logical_literal
  SUBTYPE OF (generic_literal);
  lit_value : LOGICAL;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY binary_literal
  SUBTYPE OF (generic_literal);
  lit_value : BINARY;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY maths_enum_literal
  SUBTYPE OF (generic_literal);
  lit_value : maths_enum_atom;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY real_tuple_literal
  SUBTYPE OF (generic_literal);
  lit_value : LIST [1:?] OF REAL;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY integer_tuple_literal
  SUBTYPE OF (generic_literal);
  lit_value : LIST [1:?] OF INTEGER;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY atom_based_literal
  SUBTYPE OF (generic_literal);
  lit_value : atom_based_value;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY maths_tuple_literal
  SUBTYPE OF (generic_literal);
  lit_value : LIST OF maths_value;
END_ENTITY;
(* USED FROM (shape_data_quality_criteria_schema); *)
  ENTITY multiply_defined_solids
    SUBTYPE OF(inapt_manifold_solid_brep);
      SELF\shape_data_quality_criterion.assessment_specification : shape_data_quality_assessment_by_numerical_test;
    WHERE
      WR1 : ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.' +
            'SHAPE_DATA_QUALITY_UPPER_VALUE_LIMIT'
            IN TYPEOF(SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold))
            AND ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.LENGTH_MEASURE'
            IN value_limit_type(SELF\shape_data_quality_criterion.assessment_specification\shape_data_quality_assessment_by_numerical_test.threshold));
      WR2 : validate_measured_data_type(SELF,
            'AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.LENGTH_MEASURE');
      WR3 : validate_inspected_elements_type(SELF,
            ['AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.MANIFOLD_SOLID_BREP',
             'AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.MANIFOLD_SOLID_BREP']);
      WR4 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR5 : validate_accuracy_types(SELF,
            ['AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.LENGTH_MEASURE']);
  END_ENTITY;
(* USED FROM (shape_data_quality_criteria_schema); *)
  ENTITY entirely_narrow_solid
    SUBTYPE OF(inapt_manifold_solid_brep);
      SELF\shape_data_quality_criterion.assessment_specification : shape_data_quality_assessment_by_logical_test;
      width_tolerance                                            : length_measure;
    WHERE
      WR1 : validate_measured_data_type(SELF,
            'AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.BOOLEAN_VALUE');
      WR2 : validate_inspected_elements_type(SELF,
            ['AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.MANIFOLD_SOLID_BREP']);
      WR3 : validate_locations_of_extreme_value_type(SELF,
            []);
      WR4 : validate_accuracy_types(SELF,
            ['AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.LENGTH_MEASURE']);
  END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY maths_integer_variable
  SUBTYPE OF (maths_variable, int_numeric_variable);
WHERE
  WR1: subspace_of_es(SELF\maths_variable.values_space,es_integers);
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY maths_boolean_variable
  SUBTYPE OF (maths_variable, boolean_variable);
WHERE
  WR1: subspace_of_es(SELF\maths_variable.values_space,es_booleans);
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY maths_string_variable
  SUBTYPE OF (maths_variable, string_variable);
WHERE
  WR1: subspace_of_es(SELF\maths_variable.values_space,es_strings);
END_ENTITY;
(* USED FROM (shape_data_quality_criteria_schema); *)
  ENTITY shape_criteria_representation_with_accuracy
    SUBTYPE OF(shape_data_quality_criteria_representation);
      required_general_accuracy : SET [1:?] OF shape_measurement_accuracy;
  END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY maths_space
   ABSTRACT SUPERTYPE OF (ONEOF (
                        ELEMENTARY_SPACE,
                        FINITE_INTEGER_INTERVAL,
                        INTEGER_INTERVAL_FROM_MIN,
                        INTEGER_INTERVAL_TO_MAX,
                        FINITE_REAL_INTERVAL,
                        REAL_INTERVAL_FROM_MIN,
                        REAL_INTERVAL_TO_MAX,
                        CARTESIAN_COMPLEX_NUMBER_REGION,
                        POLAR_COMPLEX_NUMBER_REGION,
                        FINITE_SPACE,
                        UNIFORM_PRODUCT_SPACE,
                        LISTED_PRODUCT_SPACE,
                        EXTENDED_TUPLE_SPACE,
                        FUNCTION_SPACE))
  SUBTYPE OF (generic_expression);
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY elementary_space
  SUBTYPE OF (maths_space, generic_literal);
  space_id : elementary_space_enumerators;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY finite_integer_interval
  SUBTYPE OF (maths_space, generic_literal);
  min  : INTEGER;
  max  : INTEGER;
DERIVE
  size : positive_integer := max - min + 1;
WHERE
  WR1: min <= max;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY integer_interval_from_min
  SUBTYPE OF (maths_space, generic_literal);
  min : INTEGER;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY integer_interval_to_max
  SUBTYPE OF (maths_space, generic_literal);
  max : INTEGER;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY finite_real_interval
  SUBTYPE OF (maths_space, generic_literal);
  min         : REAL;
  min_closure : open_closed;
  max         : REAL;
  max_closure : open_closed;
WHERE
  WR1: min < max;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY real_interval_from_min
  SUBTYPE OF (maths_space, generic_literal);
  min         : REAL;
  min_closure : open_closed;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY real_interval_to_max
  SUBTYPE OF (maths_space, generic_literal);
  max         : REAL;
  max_closure : open_closed;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY cartesian_complex_number_region
  SUBTYPE OF (maths_space, generic_literal);
  real_constraint : real_interval;
  imag_constraint : real_interval;
WHERE
  WR1: min_exists(real_constraint) OR max_exists(real_constraint) OR
       min_exists(imag_constraint) OR max_exists(imag_constraint);
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY polar_complex_number_region
  SUBTYPE OF (maths_space, generic_literal);
  centre               : complex_number_literal;
  distance_constraint  : real_interval;
  direction_constraint : finite_real_interval;
WHERE
  WR1: min_exists(distance_constraint) AND (real_min(distance_constraint) >= 0.0);
  WR2: {-PI <= direction_constraint.min < PI};
  WR3: direction_constraint.max - direction_constraint.min <= 2.0*PI;
  WR4: (direction_constraint.max - direction_constraint.min < 2.0*PI) OR
       (direction_constraint.min_closure = open);
  WR5: (direction_constraint.max - direction_constraint.min < 2.0*PI) OR
       (direction_constraint.max_closure = open) OR
       (direction_constraint.min = -PI);
  WR6: (real_min(distance_constraint) > 0.0) OR max_exists(distance_constraint) OR
       (direction_constraint.max - direction_constraint.min < 2.0*PI) OR
       (direction_constraint.max_closure = open);
END_ENTITY;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
 ENTITY shape_inspection_result_representation_with_accuracy
   SUBTYPE OF(shape_data_quality_inspection_result_representation);
     applied_general_accuracy : SET [1:?] OF shape_measurement_accuracy;
 END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY uniform_product_space
  SUBTYPE OF (maths_space, generic_literal);
  base     : maths_space;
  exponent : positive_integer;
WHERE
  WR1: expression_is_constant(base);
  WR2: no_cyclic_space_reference(SELF, []);
  WR3: base <> the_empty_space;
END_ENTITY;
(* REFERENCE FROM (date_time_schema); *)
ENTITY event_occurrence_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY extended_tuple_space
  SUBTYPE OF (maths_space, generic_literal);
  base     : product_space;
  extender : maths_space;
WHERE
  WR1: expression_is_constant(base) AND
       expression_is_constant(extender);
  WR2: no_cyclic_space_reference(SELF, []);
  WR3: extender <> the_empty_space;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY function_space
  SUBTYPE OF (maths_space, generic_literal);
  domain_constraint : space_constraint_type;
  domain_argument  : maths_space;
  range_constraint : space_constraint_type;
  range_argument   : maths_space;
WHERE
  WR1: expression_is_constant(domain_argument) AND
       expression_is_constant(range_argument);
  WR2: (domain_argument <> the_empty_space) AND
       (range_argument <> the_empty_space);
  WR3: (domain_constraint <> sc_member) OR NOT
       member_of(the_empty_space,domain_argument);
  WR4: (range_constraint <> sc_member) OR NOT
       member_of(the_empty_space,range_argument);
  WR5: NOT (any_space_satisfies(domain_constraint,domain_argument) AND
       any_space_satisfies(range_constraint,range_argument));
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY maths_function
   ABSTRACT SUPERTYPE OF (ONEOF (
                        FINITE_FUNCTION,
                        CONSTANT_FUNCTION,
                        SELECTOR_FUNCTION,
                        ELEMENTARY_FUNCTION,
                        RESTRICTION_FUNCTION,
                        REPACKAGING_FUNCTION,
                        REINDEXED_ARRAY_FUNCTION,
                        SERIES_COMPOSED_FUNCTION,
                        PARALLEL_COMPOSED_FUNCTION,
                        EXPLICIT_TABLE_FUNCTION,
                        HOMOGENEOUS_LINEAR_FUNCTION,
                        GENERAL_LINEAR_FUNCTION,
                        B_SPLINE_BASIS,
                        B_SPLINE_FUNCTION,
                        RATIONALIZE_FUNCTION,
                        PARTIAL_DERIVATIVE_FUNCTION,
                        DEFINITE_INTEGRAL_FUNCTION,
                        ABSTRACTED_EXPRESSION_FUNCTION,
                        EXPRESSION_DENOTED_FUNCTION,
                        IMPORTED_POINT_FUNCTION,
                        IMPORTED_CURVE_FUNCTION,
                        IMPORTED_SURFACE_FUNCTION,
                        IMPORTED_VOLUME_FUNCTION,
                        APPLICATION_DEFINED_FUNCTION))
  SUBTYPE OF (generic_expression);
DERIVE
  domain : tuple_space := derive_function_domain(SELF);
  range : tuple_space := derive_function_range(SELF);
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY finite_function
  SUBTYPE OF (maths_function, generic_literal);
  pairs : SET [1:?] OF LIST [2:2] OF maths_value;
WHERE
  WR1: VALUE_UNIQUE(list_selected_components(pairs, 1));
END_ENTITY;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
 ENTITY shape_inspection_result_accuracy_association;
     applied_specific_accuracy : shape_measurement_accuracy;
     shape_data_quality_result : shape_data_quality_inspection_result;
 END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY selector_function
  SUBTYPE OF (maths_function, generic_literal);
  selector : input_selector;
  source_of_domain : maths_space_or_function;
WHERE
  WR1: no_cyclic_domain_reference(source_of_domain, [SELF]);
  WR2: expression_is_constant(domain_from(source_of_domain));
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY elementary_function
  SUBTYPE OF (maths_function, generic_literal);
  func_id : elementary_function_enumerators;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY restriction_function
  SUBTYPE OF (maths_function, unary_generic_expression);
  SELF\unary_generic_expression.operand : maths_space;
END_ENTITY;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
 ENTITY shape_data_quality_inspection_instance_report_item
   SUBTYPE OF(data_quality_inspection_instance_report_item);
     SELF\data_quality_inspection_instance_report_item.inspected_elements : SET [1:?] OF inspected_shape_element_select;
     measured_value     : measured_value_select;
 END_ENTITY;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
 ENTITY shape_data_quality_inspection_instance_report
   SUBTYPE OF(data_quality_inspection_instance_report);
     SELF\data_quality_inspection_instance_report.inspected_instances : LIST [1:?] OF shape_data_quality_inspection_instance_report_item;
 END_ENTITY;

(* Implicit interfaced from: presentation_definition_schema *)
  ENTITY symbol_target
    SUBTYPE OF (geometric_representation_item);
      placement         : axis2_placement;
      x_scale           : positive_ratio_measure;
      y_scale           : positive_ratio_measure;
  END_ENTITY;

(* Implicit interfaced from: presentation_appearance_schema *)
  ENTITY two_direction_repeat_factor
    SUBTYPE OF (one_direction_repeat_factor);
      second_repeat_factor : vector;
  END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY explicit_table_function
   ABSTRACT SUPERTYPE OF (ONEOF (
                        LISTED_REAL_DATA,
                        LISTED_INTEGER_DATA,
                        LISTED_LOGICAL_DATA,
                        LISTED_STRING_DATA,
                        LISTED_COMPLEX_NUMBER_DATA,
                        LISTED_DATA,
                        EXTERNALLY_LISTED_DATA,
                        LINEARIZED_TABLE_FUNCTION,
                        BASIC_SPARSE_MATRIX))
  SUBTYPE OF (maths_function);
  index_base : zero_or_one;
  shape      : LIST [1:?] OF positive_integer;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY listed_real_data
  SUBTYPE OF (explicit_table_function, generic_literal);
  values : LIST [1:?] OF REAL;
DERIVE
  self\explicit_table_function.shape : LIST [1:?] OF positive_integer :=
    [SIZEOF (values)];
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY listed_integer_data
  SUBTYPE OF (explicit_table_function, generic_literal);
  values : LIST [1:?] OF INTEGER;
DERIVE
  self\explicit_table_function.shape : LIST [1:?] OF positive_integer :=
    [SIZEOF (values)];
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY listed_logical_data
  SUBTYPE OF(explicit_table_function, generic_literal);
  values : LIST [1:?] OF LOGICAL;
DERIVE
  self\explicit_table_function.shape : LIST [1:?] OF positive_integer :=
    [SIZEOF (values)];
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY listed_string_data
  SUBTYPE OF (explicit_table_function, generic_literal);
  values : LIST [1:?] OF STRING;
DERIVE
  self\explicit_table_function.shape : LIST [1:?] OF positive_integer :=
    [SIZEOF (values)];
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY listed_complex_number_data
  SUBTYPE OF (explicit_table_function, generic_literal);
  values : LIST [2:?] OF REAL;
DERIVE
      SELF\explicit_table_function.shape : LIST [1:?] OF positive_integer := [ SIZEOF(values) DIV 2 ];
WHERE
      WR1:
         NOT ODD(SIZEOF(values));
END_ENTITY;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
 ENTITY extreme_instance;
     locations_of_extreme_value : SET [1:?] OF location_of_extreme_value_select;
     measured_value             : measured_value_select;
 END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY externally_listed_data
  SUBTYPE OF (explicit_table_function, generic_literal, externally_defined_item);
  value_range : maths_space;
WHERE
  WR1: expression_is_constant(value_range);
END_ENTITY;

(* Implicit interfaced from: geometric_model_schema *)
ENTITY swept_area_solid
  SUPERTYPE OF (ONEOF (
              REVOLVED_AREA_SOLID,
              EXTRUDED_AREA_SOLID,
              SURFACE_CURVE_SWEPT_AREA_SOLID))
  SUBTYPE OF (solid_model);
  swept_area : curve_bounded_surface;
WHERE
  WR1: 'AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.PLANE' IN TYPEOF(swept_area.basis_surface);
END_ENTITY;

(* Implicit interfaced from: management_resources_schema *)
  ENTITY effectivity_context_role;
    name : label;
    description : OPTIONAL text;
  END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY regular_table_function
  SUBTYPE OF (linearized_table_function);
  increments : LIST [1:?] OF INTEGER;
WHERE
  WR1: SIZEOF (increments) = SIZEOF (self\explicit_table_function.shape);
  WR2: extremal_position_check(self);
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY triangular_matrix
  SUBTYPE OF (linearized_table_function);
  default_entry : maths_value;
  lo_up         : lower_upper;
  order         : ordering_type;
WHERE
  WR1: SIZEOF (SELF\explicit_table_function.shape) = 2;
  WR2: member_of(default_entry, SELF\maths_function.range);
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY strict_triangular_matrix
  SUBTYPE OF (triangular_matrix);
  main_diagonal_value : maths_value;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY symmetric_matrix
  SUBTYPE OF (linearized_table_function);
  symmetry : symmetry_type;
  triangle : lower_upper;
  order    : ordering_type;
WHERE
  WR1: SIZEOF (SELF\explicit_table_function.shape) = 2;
  WR2: SELF\explicit_table_function.shape[1] =
       SELF\explicit_table_function.shape[2];
  WR3: NOT (symmetry = symmetry_type.skew) OR (
       (space_dimension(SELF\linearized_table_function.source.range) = 1) AND
        subspace_of_es(factor1(SELF\linearized_table_function.source.range),
        es_numbers));
  WR4: NOT ((symmetry = symmetry_type.hermitian) OR (symmetry = symmetry_type.skew_hermitian)) OR (
       (space_dimension(SELF\linearized_table_function.source.range) = 1) AND
        subspace_of_es(factor1(SELF\linearized_table_function.source.range),
        es_complex_numbers));
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY symmetric_banded_matrix
  SUBTYPE OF (symmetric_matrix);
  default_entry : maths_value;
  above         : nonnegative_integer;
WHERE
  WR1: member_of(default_entry,
       factor1(SELF\linearized_table_function.source.range));
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY banded_matrix
  SUBTYPE OF (linearized_table_function);
  default_entry : maths_value;
  below         : integer;
  above         : integer;
  order         : ordering_type;
WHERE
  WR1: SIZEOF (self\explicit_table_function.shape) = 2;
  WR2: -below <= above;
  WR3: member_of(default_entry,
       factor1(SELF\linearized_table_function.source.range));
END_ENTITY;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
 ENTITY plane_angle_and_length_pair
   SUBTYPE OF(founded_item);
     plane_angle_value : plane_angle_measure;
     length_value      : length_measure;
 END_ENTITY;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
 ENTITY b_spline_surface_knot_locator
   SUBTYPE OF(founded_item);
     basis_surface     : b_spline_surface;
     knot_index        : INTEGER;
     surface_parameter : u_or_v_parameter;
   WHERE
     WR1 : SIZEOF(
           using_representations(SELF.basis_surface) *
           relating_shape_representations_of_extreme_values(SELF))>0;
 END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY general_linear_function
  SUBTYPE OF (maths_function, unary_generic_expression);
  SELF\unary_generic_expression.operand : maths_function;
  sum_index : one_or_two;
DERIVE
  mat       : maths_function := SELF\unary_generic_expression.operand;
WHERE
  WR1: function_is_2d_table(mat);
  WR2: (space_dimension(mat.range) = 1) AND
       subspace_of_es(factor1(mat.range),es_numbers);
END_ENTITY;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
 ENTITY b_spline_surface_patch
   SUBTYPE OF(founded_item);
     basis_surface      : b_spline_surface;
     u_start_knot_index : INTEGER;
     v_start_knot_index : INTEGER;
   WHERE
     WR1 : SIZEOF(
           using_representations(SELF.basis_surface) *
           relating_shape_representations_of_extreme_values(SELF))>0;
 END_ENTITY;

(* Implicit interfaced from: topology_schema *)
 ENTITY oriented_open_shell
   SUBTYPE OF (open_shell);
   open_shell_element : open_shell;
   orientation        : BOOLEAN;
 DERIVE
   SELF\connected_face_set.cfs_faces : SET [1:?] OF face
                                := conditional_reverse(SELF.orientation,
                                      SELF.open_shell_element.cfs_faces);
 WHERE
   WR1: NOT ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.ORIENTED_OPEN_SHELL' 
                IN TYPEOF (SELF.open_shell_element));
 END_ENTITY;

(* Implicit interfaced from: topology_schema *)
 ENTITY oriented_path
   SUBTYPE OF (path);
   path_element : path;
   orientation  : BOOLEAN;
 DERIVE
   SELF\path.edge_list : LIST [1:?] OF UNIQUE oriented_edge
                           := conditional_reverse(SELF.orientation,
                                         SELF.path_element.edge_list);
 WHERE
   WR1: NOT ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.ORIENTED_PATH' IN TYPEOF (SELF.path_element));
 END_ENTITY;

(* Implicit interfaced from: product_concept_schema *)
ENTITY concept_feature_relationship_with_condition
  SUBTYPE OF (concept_feature_relationship);
  conditional_operator : concept_feature_operator;
END_ENTITY;

(* Implicit interfaced from: solid_shape_element_schema *)
ENTITY solid_with_hole
   ABSTRACT SUPERTYPE OF (
                        SOLID_WITH_STEPPED_ROUND_HOLE)
  SUBTYPE OF (solid_with_depression);
END_ENTITY;

(* Implicit interfaced from: solid_shape_element_schema *)
ENTITY solid_with_slot
   ABSTRACT SUPERTYPE OF ((ONEOF (
                        SOLID_WITH_TRAPEZOIDAL_SECTION_SLOT,
                        SOLID_WITH_TEE_SECTION_SLOT))
                        AND (ONEOF (
                        SOLID_WITH_STRAIGHT_SLOT,
                        SOLID_WITH_CURVED_SLOT)))
  SUBTYPE OF (solid_with_depression);
  slot_width     : positive_length_measure;
  closed_ends    : LIST[2:2] OF LOGICAL;
  end_exit_faces : LIST[2:2] OF SET[0:?] OF face_surface;
WHERE
  WR1: NOT(('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.SOLID_WITH_THROUGH_DEPRESSION' IN
         TYPEOF(SELF)) AND (closed_ends = [FALSE,FALSE]));
  WR2: NOT(((closed_ends[1] = TRUE) AND (SIZEOF(end_exit_faces[1]) <> 0))
         OR ((closed_ends[2] = TRUE) AND (SIZEOF(end_exit_faces[2]) <> 0)));
END_ENTITY;

(* Implicit interfaced from: state_type_schema *)
ENTITY state_type_role;
  name : label;
  description : OPTIONAL text;
END_ENTITY;

(* Implicit interfaced from: solid_shape_element_schema *)
ENTITY solid_with_depression
   ABSTRACT SUPERTYPE OF (
                        SOLID_WITH_THROUGH_DEPRESSION
                        ANDOR ONEOF (
                        SOLID_WITH_HOLE,
                        SOLID_WITH_POCKET,
                        SOLID_WITH_SLOT,
                        SOLID_WITH_GROOVE))
  SUBTYPE OF (modified_solid_with_placed_configuration);
  depth : positive_length_measure;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY expression_denoted_function
  SUBTYPE OF (maths_function, unary_generic_expression);
DERIVE
  expr : generic_expression := SELF\unary_generic_expression.operand;
WHERE
  WR1: (schema_prefix + 'FUNCTION_SPACE') IN TYPEOF (values_space_of(expr));
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY imported_point_function
  SUBTYPE OF (maths_function, generic_literal);
  geometry : point;
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY imported_curve_function
  SUBTYPE OF (maths_function, generic_literal);
  geometry          : curve;
  parametric_domain : tuple_space;
WHERE
  WR1: expression_is_constant(parametric_domain);
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY imported_surface_function
  SUBTYPE OF (maths_function, generic_literal);
  geometry          : surface;
  parametric_domain : tuple_space;
WHERE
  WR1: expression_is_constant(parametric_domain);
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY imported_volume_function
  SUBTYPE OF (maths_function, generic_literal);
  geometry          : volume;
  parametric_domain : tuple_space;
WHERE
  WR1: expression_is_constant(parametric_domain);
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY application_defined_function
    SUPERTYPE OF (ONEOF (
               MESH_FUNCTION,
               MESH_FUNCTION_BASIS) ) 
      SUBTYPE OF (maths_function);
  explicit_domain : tuple_space;
  explicit_range  : tuple_space;
  parameters      : LIST OF maths_value;
WHERE
  WR1: expression_is_constant(explicit_domain);
  WR2: expression_is_constant(explicit_range);
END_ENTITY;
(* USED FROM (mathematical_functions_schema); *)
ENTITY mathematical_description;
  described  : maths_expression;
  describing : STRING;
  encoding   : label;
END_ENTITY;
(* USED FROM (shape_data_quality_inspection_result_schema); *)
 ENTITY b_spline_surface_strip
   SUBTYPE OF(founded_item);
     basis_surface     : b_spline_surface;
     start_knot_index  : INTEGER;
     surface_parameter : u_or_v_parameter;
   WHERE
     WR1 : SIZEOF(
           using_representations(SELF.basis_surface) *
           relating_shape_representations_of_extreme_values(SELF))>0;
 END_ENTITY;
(* USED FROM (iso13584_generic_expressions_schema); *)
ENTITY simple_generic_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        GENERIC_LITERAL,
                        GENERIC_VARIABLE))

SUBTYPE OF (generic_expression);
END_ENTITY;
(* USED FROM (iso13584_generic_expressions_schema); *)
ENTITY generic_literal
 ABSTRACT SUPERTYPE

SUBTYPE OF (simple_generic_expression);
END_ENTITY; 
(* USED FROM (iso13584_generic_expressions_schema); *)
ENTITY generic_variable
 ABSTRACT SUPERTYPE

SUBTYPE OF (simple_generic_expression);
INVERSE
	interpretation :
			environment FOR syntactic_representation;
END_ENTITY;
(* USED FROM (iso13584_generic_expressions_schema); *)
ENTITY variable_semantics
 ABSTRACT SUPERTYPE;
END_ENTITY;
(* USED FROM (iso13584_generic_expressions_schema); *)
ENTITY environment;
	syntactic_representation: generic_variable;
	semantics: variable_semantics;
END_ENTITY;
(* USED FROM (iso13584_generic_expressions_schema); *)
ENTITY unary_generic_expression
  ABSTRACT SUPERTYPE OF (ONEOF (
                        MESH_FUNCTION,
                        MESH_FUNCTION_BASIS) ) 

SUBTYPE OF(generic_expression);
	operand: generic_expression;
END_ENTITY;
(* USED FROM (iso13584_generic_expressions_schema); *)
ENTITY binary_generic_expression
 ABSTRACT SUPERTYPE

SUBTYPE OF(generic_expression);
	operands: LIST [2:2] OF generic_expression;
END_ENTITY;
(* USED FROM (iso13584_generic_expressions_schema); *)
ENTITY multiple_arity_generic_expression
 ABSTRACT SUPERTYPE

SUBTYPE OF(generic_expression);
	operands: LIST [2:?] OF generic_expression;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        NUMERIC_EXPRESSION,
                        BOOLEAN_EXPRESSION,
                        STRING_EXPRESSION))

SUBTYPE OF (generic_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY variable
 ABSTRACT SUPERTYPE OF (ONEOF (
                        NUMERIC_VARIABLE,
                        BOOLEAN_VARIABLE,
                        STRING_VARIABLE))

SUBTYPE OF(generic_variable);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY defined_function
 ABSTRACT SUPERTYPE OF ((ONEOF (
                        NUMERIC_DEFINED_FUNCTION,
                        STRING_DEFINED_FUNCTION,
                        BOOLEAN_DEFINED_FUNCTION))
                        ANDOR 
                        SQL_MAPPABLE_DEFINED_FUNCTION);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY SQL_mappable_defined_function
 ABSTRACT SUPERTYPE

SUBTYPE OF (defined_function);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY numeric_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        SIMPLE_NUMERIC_EXPRESSION,
                        UNARY_NUMERIC_EXPRESSION,
                        BINARY_NUMERIC_EXPRESSION,
                        MULTIPLE_ARITY_NUMERIC_EXPRESSION,
                        LENGTH_FUNCTION,
                        VALUE_FUNCTION,
                        NUMERIC_DEFINED_FUNCTION))

SUBTYPE OF (expression);
DERIVE
	is_int: BOOLEAN := is_int_expr (SELF);
	sql_mappable: BOOLEAN := is_SQL_mappable (SELF);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY simple_numeric_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        LITERAL_NUMBER,
                        NUMERIC_VARIABLE))

SUBTYPE OF (numeric_expression, simple_generic_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY literal_number 
 ABSTRACT SUPERTYPE OF (ONEOF (
                        INT_LITERAL,
                        REAL_LITERAL))

SUBTYPE OF (simple_numeric_expression, generic_literal);
	the_value: NUMBER;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY int_literal
SUBTYPE OF (literal_number);
	SELF\literal_number.the_value: INTEGER;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY real_literal
SUBTYPE OF (literal_number); 
	SELF\literal_number.the_value: REAL;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY numeric_variable
SUPERTYPE OF (ONEOF (
              INT_NUMERIC_VARIABLE,
              REAL_NUMERIC_VARIABLE))

SUBTYPE OF (simple_numeric_expression, variable);
WHERE 
	WR1:	('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.INT_NUMERIC_VARIABLE' 
			IN TYPEOF(SELF) ) OR
			('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.REAL_NUMERIC_VARIABLE' 
			IN TYPEOF(SELF) );
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY int_numeric_variable
SUBTYPE OF (numeric_variable);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY real_numeric_variable
SUBTYPE OF (numeric_variable);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
(* Pruned SUPERTYPE *)
ENTITY unary_numeric_expression
 ABSTRACT SUPERTYPE

SUBTYPE OF (numeric_expression, unary_generic_expression);
	SELF\unary_generic_expression.operand	: numeric_expression;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY binary_numeric_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        MINUS_EXPRESSION,
                        DIV_EXPRESSION,
                        MOD_EXPRESSION,
                        SLASH_EXPRESSION,
                        POWER_EXPRESSION,
                        BINARY_FUNCTION_CALL))

SUBTYPE OF (numeric_expression, binary_generic_expression);
	SELF\binary_generic_expression.operands : LIST [2:2] OF 
						numeric_expression;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY multiple_arity_numeric_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        PLUS_EXPRESSION,
                        MULT_EXPRESSION,
                        MULTIPLE_ARITY_FUNCTION_CALL))

SUBTYPE OF (numeric_expression, multiple_arity_generic_expression);
	SELF\multiple_arity_generic_expression.operands	: LIST [2:?] OF 						numeric_expression;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY length_function
SUBTYPE OF (numeric_expression, unary_generic_expression);
	SELF\unary_generic_expression.operand: string_expression;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY value_function
SUPERTYPE OF (
              INT_VALUE_FUNCTION)

SUBTYPE OF (numeric_expression, unary_generic_expression);
	SELF\unary_generic_expression.operand: string_expression;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY int_value_function
SUBTYPE OF (value_function);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY numeric_defined_function
 ABSTRACT SUPERTYPE OF (ONEOF (
                        INTEGER_DEFINED_FUNCTION,
                        REAL_DEFINED_FUNCTION))

SUBTYPE OF (numeric_expression, defined_function);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY plus_expression
SUBTYPE OF (multiple_arity_numeric_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY minus_expression
SUBTYPE OF (binary_numeric_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY mult_expression
SUBTYPE OF (multiple_arity_numeric_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY div_expression
SUBTYPE OF (binary_numeric_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY mod_expression
SUBTYPE OF (binary_numeric_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY slash_expression
SUBTYPE OF (binary_numeric_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY power_expression
SUBTYPE OF (binary_numeric_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY unary_function_call
 ABSTRACT SUPERTYPE OF (ONEOF (
                        ABS_FUNCTION,
                        MINUS_FUNCTION,
                        SIN_FUNCTION,
                        COS_FUNCTION,
                        TAN_FUNCTION,
                        ASIN_FUNCTION,
                        ACOS_FUNCTION,
                        EXP_FUNCTION,
                        LOG_FUNCTION,
                        LOG2_FUNCTION,
                        LOG10_FUNCTION,
                        SQUARE_ROOT_FUNCTION))

SUBTYPE OF (unary_numeric_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
(* Pruned SUPERTYPE *)
ENTITY binary_function_call
 ABSTRACT SUPERTYPE

SUBTYPE OF (binary_numeric_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY multiple_arity_function_call
 ABSTRACT SUPERTYPE OF (ONEOF (
                        MAXIMUM_FUNCTION,
                        MINIMUM_FUNCTION))

SUBTYPE OF (multiple_arity_numeric_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY abs_function
SUBTYPE OF (unary_function_call);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY minus_function
SUBTYPE OF (unary_function_call);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY sin_function
SUBTYPE OF (unary_function_call);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY cos_function
SUBTYPE OF (unary_function_call);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY tan_function
SUBTYPE OF (unary_function_call);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY asin_function
	SUBTYPE OF (unary_function_call);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY acos_function
SUBTYPE OF (unary_function_call);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY exp_function
SUBTYPE OF (unary_function_call);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY log_function
SUBTYPE OF (unary_function_call);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY log2_function
SUBTYPE OF (unary_function_call);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY log10_function
SUBTYPE OF (unary_function_call);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY square_root_function
SUBTYPE OF (unary_function_call);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY atan_function
SUBTYPE OF (binary_function_call);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY maximum_function
SUBTYPE OF (multiple_arity_function_call);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY minimum_function
SUBTYPE OF (multiple_arity_function_call);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY integer_defined_function 
 ABSTRACT SUPERTYPE

SUBTYPE OF (numeric_defined_function);
END_ENTITY ;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY real_defined_function 
 ABSTRACT SUPERTYPE

SUBTYPE OF (numeric_defined_function);
END_ENTITY ;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY boolean_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        SIMPLE_BOOLEAN_EXPRESSION,
                        UNARY_BOOLEAN_EXPRESSION,
                        BINARY_BOOLEAN_EXPRESSION,
                        MULTIPLE_ARITY_BOOLEAN_EXPRESSION,
                        COMPARISON_EXPRESSION,
                        INTERVAL_EXPRESSION,
                        BOOLEAN_DEFINED_FUNCTION))

SUBTYPE OF (expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY simple_boolean_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        BOOLEAN_LITERAL,
                        BOOLEAN_VARIABLE))

SUBTYPE OF (boolean_expression, simple_generic_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY boolean_literal
SUBTYPE OF (simple_Boolean_expression, generic_literal);
	the_value: BOOLEAN;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY boolean_variable
SUBTYPE OF (simple_Boolean_expression, variable);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY unary_boolean_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        NOT_EXPRESSION,
                        ODD_FUNCTION))

SUBTYPE OF (boolean_expression, unary_generic_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY not_expression
SUBTYPE OF (unary_Boolean_expression);
SELF\unary_generic_expression.operand: boolean_expression;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY odd_function
SUBTYPE OF (unary_Boolean_expression);
	SELF\unary_generic_expression.operand: numeric_expression;
WHERE
	WR1: is_int_expr(operand);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY binary_boolean_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        XOR_EXPRESSION,
                        EQUALS_EXPRESSION))

SUBTYPE OF (boolean_expression, binary_generic_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY multiple_arity_boolean_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        AND_EXPRESSION,
                        OR_EXPRESSION))

SUBTYPE OF (boolean_expression, multiple_arity_generic_expression);
	SELF\multiple_arity_generic_expression.operands	: 
LIST [2:?] OF boolean_expression;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY xor_expression
SUBTYPE OF (binary_boolean_expression);
	SELF\binary_generic_expression.operands: 
				LIST [2:2] OF boolean_expression;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY equals_expression
SUBTYPE OF (binary_boolean_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY and_expression
SUBTYPE OF (multiple_arity_boolean_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY or_expression
SUBTYPE OF (multiple_arity_boolean_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY comparison_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        COMPARISON_EQUAL,
                        COMPARISON_GREATER,
                        COMPARISON_GREATER_EQUAL,
                        COMPARISON_LESS,
                        COMPARISON_LESS_EQUAL,
                        COMPARISON_NOT_EQUAL,
                        LIKE_EXPRESSION))

SUBTYPE OF (boolean_expression, binary_generic_expression);
	SELF\binary_generic_expression.operands	: LIST [2:2] OF expression; 
WHERE 
	WR1: (('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.NUMERIC_EXPRESSION' 
IN TYPEOF(SELF\binary_generic_expression.operands[1]))
		AND 
		 	('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.NUMERIC_EXPRESSION' 
IN TYPEOF(SELF\binary_generic_expression.operands[2]))) 
OR
 (('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.BOOLEAN_EXPRESSION' 
IN TYPEOF(SELF\binary_generic_expression.operands[1]))
		AND 
		 	('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.BOOLEAN_EXPRESSION' 
	IN TYPEOF(SELF\binary_generic_expression.operands[2])))
OR
(('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.STRING_EXPRESSION' 
IN TYPEOF(SELF\binary_generic_expression.operands[1]))
		AND 
		 	('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.STRING_EXPRESSION' 
IN TYPEOF(SELF\binary_generic_expression.operands[2]))) ;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY comparison_equal
SUBTYPE OF (comparison_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY comparison_greater
SUBTYPE OF (comparison_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY comparison_greater_equal
SUBTYPE OF (comparison_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY comparison_less
SUBTYPE OF (comparison_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY comparison_less_equal
SUBTYPE OF (comparison_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY comparison_not_equal
	SUBTYPE OF (comparison_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY like_expression
SUBTYPE OF (comparison_expression);
WHERE
	WR1: ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.STRING_EXPRESSION' 
		IN TYPEOF(SELF\binary_generic_expression.operands[1])) AND 
		('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.STRING_EXPRESSION' 
		IN TYPEOF(SELF\binary_generic_expression.operands[2]));
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY interval_expression
SUBTYPE OF (boolean_expression, multiple_arity_generic_expression) ;
DERIVE
	interval_low: generic_expression
			:= SELF\multiple_arity_generic_expression.operands[1];
	interval_item:generic_expression
			:= SELF\multiple_arity_generic_expression.operands[2];
	interval_high:generic_expression
			:= SELF\multiple_arity_generic_expression.operands[3];
WHERE
	WR1:('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.EXPRESSION' 
				IN TYPEOF(interval_low))
		AND ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.EXPRESSION' 
				IN TYPEOF(interval_item) )
		AND ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.EXPRESSION' 
				IN TYPEOF(interval_high));
	WR2:(('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.STRING_EXPRESSION' 
				IN TYPEOF (SELF.interval_low)) 
			AND ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.STRING_EXPRESSION'  
				IN TYPEOF (SELF.interval_high)) 
			AND ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.STRING_EXPRESSION' 
				IN TYPEOF (SELF.interval_item))) 
		OR
		(('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.NUMERIC_EXPRESSION' 
				IN TYPEOF(SELF.interval_low)) 
			AND ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.NUMERIC_EXPRESSION' 
				IN TYPEOF(SELF.interval_item)) 
			AND ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.NUMERIC_EXPRESSION' 
				IN TYPEOF(SELF.interval_high)));
END_ENTITY; 
(* USED FROM (iso13584_expressions_schema); *)
ENTITY boolean_defined_function 
 ABSTRACT SUPERTYPE

SUBTYPE OF (defined_function, boolean_expression);
END_ENTITY ;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY string_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        SIMPLE_STRING_EXPRESSION,
                        INDEX_EXPRESSION,
                        SUBSTRING_EXPRESSION,
                        CONCAT_EXPRESSION,
                        FORMAT_FUNCTION,
                        STRING_DEFINED_FUNCTION))

SUBTYPE OF (expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY simple_string_expression
 ABSTRACT SUPERTYPE OF (ONEOF (
                        STRING_LITERAL,
                        STRING_VARIABLE))

SUBTYPE OF (string_expression, simple_generic_expression);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY string_literal
SUBTYPE OF (simple_string_expression, generic_literal);
	the_value: STRING;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY string_variable
SUBTYPE OF (simple_string_expression, variable);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY index_expression
SUBTYPE OF (string_expression, binary_generic_expression);
DERIVE
	operand:generic_expression:=
SELF\binary_generic_expression.operands[1];
	index:generic_expression:= 
SELF\binary_generic_expression.operands[2];
WHERE
	WR1: ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.STRING_EXPRESSION' 
			IN TYPEOF(operand))
		AND ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.NUMERIC_EXPRESSION' 
			IN TYPEOF(index));
	WR2: is_int_expr (index);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY substring_expression
SUBTYPE OF (string_expression, multiple_arity_generic_expression);
DERIVE
	operand:generic_expression:=
			SELF\multiple_arity_generic_expression.operands[1];
	index1:generic_expression:=
			SELF\multiple_arity_generic_expression.operands[2];
	index2:generic_expression:=
			SELF\multiple_arity_generic_expression.operands[3]; 
WHERE
	WR1: ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.STRING_EXPRESSION' 
					IN TYPEOF(operand))
			AND ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.NUMERIC_EXPRESSION' 
					IN TYPEOF(index1))
			AND ('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.NUMERIC_EXPRESSION' 
					IN TYPEOF(index2));
	WR2: SIZEOF(SELF\multiple_arity_generic_expression.operands)=3;
	WR3: is_int_expr (index1);
	WR4: is_int_expr (index2);
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY concat_expression
SUBTYPE OF (string_expression, multiple_arity_generic_expression);
	SELF\multiple_arity_generic_expression.operands: 
				LIST [2 : ?] OF string_expression;
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY format_function
SUBTYPE OF (string_expression, binary_generic_expression);
DERIVE
	value_to_format: generic_expression:=
			SELF\binary_generic_expression.operands[1];
	format_string:generic_expression:=
			SELF\binary_generic_expression.operands[2];
WHERE
	WR1: (('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.NUMERIC_EXPRESSION') 
					IN TYPEOF(value_to_format)) 
			AND (('AP209_MULTIDISCIPLINARY_ANALYSIS_AND_DESIGN_MIM_LF.STRING_EXPRESSION') 
					IN TYPEOF(format_string));
END_ENTITY;
(* USED FROM (iso13584_expressions_schema); *)
ENTITY string_defined_function 
 ABSTRACT SUPERTYPE

SUBTYPE OF (defined_function, string_expression);
END_ENTITY ;
(* USED FROM (Collection_identification_and_version_mim); *)
ENTITY collection
  SUBTYPE OF (product);
END_ENTITY;
(* USED FROM (Collection_identification_and_version_mim); *)
ENTITY collection_assignment
  SUBTYPE OF (applied_group_assignment);
END_ENTITY;
(* USED FROM (Collection_identification_and_version_mim); *)
ENTITY collection_membership
  SUBTYPE OF (applied_group_assignment);
END_ENTITY;
(* USED FROM (Collection_identification_and_version_mim); *)
ENTITY collection_relationship
  SUBTYPE OF (product_relationship);
  SELF\product_relationship.relating_product : collection;    -- relating_collection : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, an attribute with the new name is in the DERIVE clause
  SELF\product_relationship.related_product : collection;     -- related_collection : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, an attribute with the new name is in the DERIVE clause
    DERIVE
      related_collection : COLLECTION := SELF\product_relationship.related_product;  -- RELATED_PRODUCT : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, this is the new name implemented as DERIVE
      relating_collection : COLLECTION := SELF\product_relationship.relating_product;  -- RELATING_PRODUCT : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, this is the new name implemented as DERIVE

END_ENTITY;
(* USED FROM (Collection_identification_and_version_mim); *)
ENTITY collection_version
  SUBTYPE OF (product_definition_formation);
  SELF\product_definition_formation.of_product : collection;  -- of_collection : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, an attribute with the new name is in the DERIVE clause
    DERIVE
      of_collection : COLLECTION := SELF\product_definition_formation.of_product;  -- OF_PRODUCT : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, this is the new name implemented as DERIVE

END_ENTITY;
(* USED FROM (Collection_identification_and_version_mim); *)
ENTITY collection_version_relationship
  SUBTYPE OF (product_definition_formation_relationship);
  SELF\product_definition_formation_relationship.relating_product_definition_formation : collection_version;  -- relating_version : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, an attribute with the new name is in the DERIVE clause
  SELF\product_definition_formation_relationship.related_product_definition_formation : collection_version;  -- related_version : This ATTRIBUTE was RENAMED in the EXPRESS E2 source, an attribute with the new name is in 